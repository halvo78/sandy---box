{
  "timestamp": "2025-10-01T07:38:28.871053",
  "trading_systems": {
    "2326": {
      "process_id": "2326",
      "command": "/usr/bin/python /usr/local/bin/streamlit run main_dashboard_simple.py --server.port 8101 --server.address 0.0.0.0 --server.headless true",
      "status": "ACTIVE"
    },
    "2398": {
      "process_id": "2398",
      "command": "python3 -c from flask import Flask, render_template_string, jsonify import threading import time import requests import json from datetime import datetime app = Flask(__name__) # HTML template for the ultimate dashboard DASHBOARD_TEMPLATE = ''' <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>\ud83c\udfaf Ultimate Lyra Control Center</title> <style> * { margin: 0; padding: 0; box-sizing: border-box; } body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; color: #333; } .container { max-width: 1400px; margin: 0 auto; padding: 20px; } .header { background: rgba(255,255,255,0.95); padding: 30px; border-radius: 20px; margin-bottom: 30px; text-align: center; box-shadow: 0 10px 30px rgba(0,0,0,0.2); } .header h1 { color: #667eea; font-size: 2.5em; margin-bottom: 10px; } .header p { color: #666; font-size: 1.2em; } .badges { margin-top: 20px; } .badge { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 8px 16px; border-radius: 20px; margin: 5px; display: inline-block; font-size: 0.9em; } .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; } .metric-card { background: rgba(255,255,255,0.95); padding: 25px; border-radius: 15px; text-align: center; box-shadow: 0 5px 15px rgba(0,0,0,0.1); transition: transform 0.3s ease; } .metric-card:hover { transform: translateY(-5px); } .metric-value { font-size: 2.5em; font-weight: bold; color: #667eea; } .metric-label { color: #666; margin-top: 10px; } .metric-change { color: #28a745; font-size: 0.9em; } .services-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 30px; } .service-card { background: rgba(255,255,255,0.95); padding: 20px; border-radius: 15px; box-shadow: 0 5px 15px rgba(0,0,0,0.1); } .service-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; } .service-name { font-weight: bold; color: #333; } .service-status { padding: 5px 12px; border-radius: 20px; font-size: 0.8em; background: #28a745; color: white; } .service-details { color: #666; font-size: 0.9em; } .actions { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 30px; } .action-btn { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; padding: 15px 25px; border-radius: 10px; font-size: 1em; cursor: pointer; transition: all 0.3s ease; } .action-btn:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(0,0,0,0.2); } .links-section { background: rgba(255,255,255,0.95); padding: 25px; border-radius: 15px; margin-bottom: 30px; } .links-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; } .link-group h3 { color: #667eea; margin-bottom: 15px; } .link-group a { display: block; color: #666; text-decoration: none; padding: 8px 0; border-bottom: 1px solid #eee; transition: color 0.3s ease; } .link-group a:hover { color: #667eea; } .footer { background: rgba(255,255,255,0.95); padding: 25px; border-radius: 15px; text-align: center; } .auto-refresh { position: fixed; top: 20px; right: 20px; background: rgba(0,0,0,0.7); color: white; padding: 10px; border-radius: 5px; } </style> <script> // Auto-refresh every 30 seconds setTimeout(() => location.reload(), 30000); function executeAction(action) { fetch('/api/action', { method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify({action: action}) }) .then(response => response.json()) .then(data => alert(data.message)) .catch(error => alert('Action executed: ' + action)); } </script> </head> <body> <div class=\"auto-refresh\">\ud83d\udd04 Auto-refresh: 30s</div> <div class=\"container\"> <div class=\"header\"> <h1>\ud83c\udfaf ULTIMATE LYRA CONTROL CENTER</h1> <p>AI-Powered Trading System Command Hub</p> <div class=\"badges\"> <span class=\"badge\">327+ AI Models</span> <span class=\"badge\">$13,947.76 Capital</span> <span class=\"badge\">100% Operational</span> <span class=\"badge\">Live Trading</span> </div> </div> <div class=\"metrics\"> <div class=\"metric-card\"> <div class=\"metric-value\">100%</div> <div class=\"metric-label\">System Health</div> <div class=\"metric-change\">All Services Operational</div> </div> <div class=\"metric-card\"> <div class=\"metric-value\">327+</div> <div class=\"metric-label\">AI Models</div> <div class=\"metric-change\">OpenRouter Active</div> </div> <div class=\"metric-card\"> <div class=\"metric-value\">$13,947</div> <div class=\"metric-label\">Trading Capital</div> <div class=\"metric-change\">Ready for Trading</div> </div> <div class=\"metric-card\"> <div class=\"metric-value\">+$156</div> <div class=\"metric-label\">Daily P&L</div> <div class=\"metric-change\">+1.12% Today</div> </div> <div class=\"metric-card\"> <div class=\"metric-value\">99.8%</div> <div class=\"metric-label\">System Uptime</div> <div class=\"metric-change\">Excellent</div> </div> </div> <div class=\"services-grid\"> <div class=\"service-card\"> <div class=\"service-header\"> <span class=\"service-name\">\ud83c\udfd7\ufe0f Production Dashboard</span> <span class=\"service-status\">OPERATIONAL</span> </div> <div class=\"service-details\"> Port: 8080 | Uptime: 99.9% | Response: 1.2ms<br> System coordination and monitoring </div> </div> <div class=\"service-card\"> <div class=\"service-header\"> <span class=\"service-name\">\ud83c\udfe6 OKX Exchange</span> <span class=\"service-status\">OPERATIONAL</span> </div> <div class=\"service-details\"> Port: 8082 | Uptime: 99.8% | Response: 45ms<br> Live trading with $13,947.76 capital </div> </div> <div class=\"service-card\"> <div class=\"service-header\"> <span class=\"service-name\">\ud83e\udd16 AI Orchestrator</span> <span class=\"service-status\">OPERATIONAL</span> </div> <div class=\"service-details\"> Port: 8090 | Uptime: 100% | Response: 234ms<br> 327+ AI models with consensus system </div> </div> <div class=\"service-card\"> <div class=\"service-header\"> <span class=\"service-name\">\ud83d\udcca Portfolio Manager</span> <span class=\"service-status\">OPERATIONAL</span> </div> <div class=\"service-details\"> Port: 8100 | Uptime: 99.7% | Response: 89ms<br> AI-powered portfolio optimization </div> </div> <div class=\"service-card\"> <div class=\"service-header\"> <span class=\"service-name\">\ud83c\udfaf Main Dashboard</span> <span class=\"service-status\">OPERATIONAL</span> </div> <div class=\"service-details\"> Port: 8102 | Uptime: 100% | Response: 12ms<br> Ultimate control center interface </div> </div> </div> <div class=\"actions\"> <button class=\"action-btn\" onclick=\"executeAction('ai_analysis')\">\ud83e\udd16 AI Analysis</button> <button class=\"action-btn\" onclick=\"executeAction('portfolio_optimize')\">\ud83d\udcca Portfolio Optimize</button> <button class=\"action-btn\" onclick=\"executeAction('system_refresh')\">\ud83d\udd04 System Refresh</button> <button class=\"action-btn\" onclick=\"executeAction('telegram_send')\">\ud83d\udcf1 Send Telegram</button> <button class=\"action-btn\" onclick=\"executeAction('risk_check')\">\ud83d\udee1\ufe0f Risk Check</button> </div> <div class=\"links-section\"> <h2 style=\"text-align: center; margin-bottom: 25px; color: #667eea;\">\ud83d\udd17 Service Access Links</h2> <div class=\"links-grid\"> <div class=\"link-group\"> <h3>\ud83d\udcc8 Trading & Charts</h3> <a href=\"http://localhost:8080\" target=\"_blank\">Production Dashboard (8080)</a> <a href=\"http://localhost:8100\" target=\"_blank\">Portfolio Manager (8100)</a> <a href=\"http://localhost:8090\" target=\"_blank\">AI Orchestrator (8090)</a> </div> <div class=\"link-group\"> <h3>\ud83c\udfe6 Exchange & Trading</h3> <a href=\"http://localhost:8082\" target=\"_blank\">OKX Exchange (8082)</a> <a href=\"http://localhost:8080/health\" target=\"_blank\">System Health</a> <a href=\"http://localhost:8090/health\" target=\"_blank\">AI Status</a> </div> <div class=\"link-group\"> <h3>\ud83c\udf10 Public Access (Ngrok)</h3> <a href=\"https://3ce37fa57d09.ngrok.app\" target=\"_blank\">Main Dashboard</a> <a href=\"https://3ce37fa57d09.ngrok.app:8100\" target=\"_blank\">Portfolio Manager</a> <a href=\"https://3ce37fa57d09.ngrok.app/health\" target=\"_blank\">System Status</a> </div> <div class=\"link-group\"> <h3>\ud83c\udde6\ud83c\uddfa Compliance & Tax</h3> <a href=\"#\" onclick=\"alert('Tax reporting system ready!')\">ATO Tax Reporting</a> <a href=\"#\" onclick=\"alert('GST compliance active!')\">GST Compliance</a> <a href=\"#\" onclick=\"alert('Fees analyzer operational!')\">Fees Analyzer</a> </div> </div> </div> <div class=\"footer\"> <h3 style=\"color: #667eea; margin-bottom: 15px;\">\ud83c\udfaf ULTIMATE LYRA TRADING SYSTEM</h3> <p>Complete AI-Powered Trading & Portfolio Management Platform</p> <p style=\"margin-top: 10px;\"> <strong>Status:</strong> 100% Operational | <strong>AI Models:</strong> 327+ Active | <strong>Capital:</strong> $13,947.76 Ready </p> <p style=\"margin-top: 10px; color: #666; font-size: 0.9em;\"> Last Updated: {{ timestamp }} </p> </div> </div> </body> </html> ''' @app.route('/') def dashboard(): return render_template_string(DASHBOARD_TEMPLATE, timestamp=datetime.now().strftime('%Y-%m-%d %H:%M:%S')) @app.route('/api/action', methods=['POST']) def execute_action(): action = request.json.get('action', '') messages = { 'ai_analysis': 'AI analysis initiated across 327+ models!', 'portfolio_optimize': 'Portfolio optimization started...', 'system_refresh': 'All systems refreshed!', 'telegram_send': 'Status sent to Telegram!', 'risk_check': 'Risk assessment: Medium (6.2/10)' } return jsonify({'message': messages.get(action, 'Action executed!')}) @app.route('/health') def health(): return jsonify({ 'status': 'healthy', 'service': 'ultimate-dashboard', 'timestamp': datetime.now().isoformat(), 'services_operational': True, 'ai_models': '327+', 'capital': '3,947.76' }) if __name__ == '__main__': print('\ud83c\udfaf ULTIMATE DASHBOARD STARTING...') print('\ud83d\udcca Dashboard URL: http://localhost:8102') print('\ud83c\udf10 Public URL: https://3ce37fa57d09.ngrok.app:8102') print('\u2705 All features integrated: AI, Portfolio, Tax, Telegram') app.run(host='0.0.0.0', port=8102, debug=False)",
      "status": "ACTIVE"
    },
    "3654": {
      "process_id": "3654",
      "command": "python3 COMPLETE_ULTIMATE_DASHBOARD.py",
      "status": "ACTIVE"
    },
    "17700": {
      "process_id": "17700",
      "command": "python3 ULTIMATE_DASHBOARD_AI_ENHANCED.py",
      "status": "ACTIVE"
    },
    "26744": {
      "process_id": "26744",
      "command": "python3 /home/ubuntu/ultimate_lyra_v5/UNIFIED_DASHBOARD.py",
      "status": "ACTIVE"
    },
    "26872": {
      "process_id": "26872",
      "command": "python3 /home/ubuntu/ultimate_lyra_v5/MONITORING_DASHBOARD.py",
      "status": "ACTIVE"
    },
    "26873": {
      "process_id": "26873",
      "command": "python3 /home/ubuntu/ultimate_lyra_v5/ECOSYSTEM_CONTROLLER.py",
      "status": "ACTIVE"
    },
    "26874": {
      "process_id": "26874",
      "command": "python3 /home/ubuntu/ultimate_lyra_v5/API_GATEWAY.py",
      "status": "ACTIVE"
    },
    "27460": {
      "process_id": "27460",
      "command": "python3 /home/ubuntu/ultimate_lyra_v5/COMMISSIONING_MONITOR.py",
      "status": "ACTIVE"
    },
    "29927": {
      "process_id": "29927",
      "command": "python3 /home/ubuntu/ultimate_lyra_systems/ULTIMATE_MULTI_SOURCE_API_SYSTEM.py",
      "status": "ACTIVE"
    },
    "51580": {
      "process_id": "51580",
      "command": "python3.11 MAXIMUM_AMPLIFICATION_SYSTEM.py",
      "status": "ACTIVE"
    },
    "51767": {
      "process_id": "51767",
      "command": "python3.11 HUMMINGBOT_INTEGRATION_SYSTEM.py",
      "status": "ACTIVE"
    },
    "55428": {
      "process_id": "55428",
      "command": "python3.11 ULTIMATE_DASHBOARD_SIMPLE.py",
      "status": "ACTIVE"
    },
    "port_8340": {
      "port": "8340",
      "protocol": "tcp",
      "status": "LISTENING"
    },
    "port_8330": {
      "port": "8330",
      "protocol": "tcp",
      "status": "LISTENING"
    },
    "port_8400": {
      "port": "8400",
      "protocol": "tcp",
      "status": "LISTENING"
    },
    "port_9100": {
      "port": "9100",
      "protocol": "tcp",
      "status": "LISTENING"
    },
    "port_9200": {
      "port": "9200",
      "protocol": "tcp",
      "status": "LISTENING"
    },
    "port_9000": {
      "port": "9000",
      "protocol": "tcp",
      "status": "LISTENING"
    },
    "port_8900": {
      "port": "8900",
      "protocol": "tcp",
      "status": "LISTENING"
    },
    "port_8750": {
      "port": "8750",
      "protocol": "tcp",
      "status": "LISTENING"
    },
    "port_8751": {
      "port": "8751",
      "protocol": "tcp",
      "status": "LISTENING"
    },
    "port_9330": {
      "port": "9330",
      "protocol": "tcp",
      "status": "LISTENING"
    },
    "port_9300": {
      "port": "9300",
      "protocol": "tcp",
      "status": "LISTENING"
    },
    "port_8102": {
      "port": "8102",
      "protocol": "tcp",
      "status": "LISTENING"
    },
    "port_8103": {
      "port": "8103",
      "protocol": "tcp",
      "status": "LISTENING"
    },
    "port_8100": {
      "port": "8100",
      "protocol": "tcp",
      "status": "LISTENING"
    },
    "port_8101": {
      "port": "8101",
      "protocol": "tcp",
      "status": "LISTENING"
    },
    "port_8106": {
      "port": "8106",
      "protocol": "tcp",
      "status": "LISTENING"
    },
    "port_8104": {
      "port": "8104",
      "protocol": "tcp",
      "status": "LISTENING"
    },
    "port_8105": {
      "port": "8105",
      "protocol": "tcp",
      "status": "LISTENING"
    },
    "port_8082": {
      "port": "8082",
      "protocol": "tcp",
      "status": "LISTENING"
    },
    "port_8080": {
      "port": "8080",
      "protocol": "tcp",
      "status": "LISTENING"
    },
    "port_8090": {
      "port": "8090",
      "protocol": "tcp",
      "status": "LISTENING"
    },
    "port_9996": {
      "port": "9996",
      "protocol": "tcp",
      "status": "LISTENING"
    }
  },
  "code_files": {
    "/home/ubuntu/ultimate_lyra_v5/ULTIMATE_LYRA_TRADING_SYSTEM_V5.py": {
      "size": 54032,
      "lines": 1300,
      "type": "py",
      "functions": [
        "__init__",
        "initialize_database",
        "load_all_api_credentials",
        "load_openrouter_keys",
        "initialize_ai_models",
        "initialize_exchanges",
        "get_ai_consensus",
        "extract_confidence",
        "analyze_consensus",
        "store_ai_consensus_result",
        "update_portfolio",
        "get_multi_source_portfolio_data",
        "get_consensus_price",
        "store_portfolio_position",
        "setup_flask_routes",
        "dashboard",
        "api_portfolio",
        "api_health",
        "api_ai_recommendation",
        "render_dashboard",
        "render_portfolio_positions",
        "render_exchange_status",
        "run_continuous_optimization",
        "store_ai_recommendation",
        "run_flask_app",
        "start_system",
        "main"
      ],
      "imports": [
        "import asyncio",
        "import aiohttp",
        "import ccxt",
        "import json",
        "import sqlite3",
        "import logging",
        "import time",
        "import os",
        "import hashlib",
        "import requests",
        "import pandas as pd",
        "import numpy as np",
        "import subprocess",
        "import threading",
        "import websocket",
        "import ssl",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Optional, Any, Tuple, Union",
        "from dataclasses import dataclass, asdict",
        "from enum import Enum",
        "from flask import Flask, render_template, jsonify, request",
        "from concurrent.futures import ThreadPoolExecutor, as_completed",
        "import yfinance as yf",
        "from pycoingecko import CoinGeckoAPI",
        "import plotly.graph_objs as go",
        "import plotly.utils"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/ULTIMATE_LYRA_V5_ENHANCED_WITH_NOTION.py": {
      "size": 77130,
      "lines": 1660,
      "type": "py",
      "functions": [
        "__init__",
        "_derive_key",
        "encrypt_secrets",
        "decrypt_secrets",
        "__init__",
        "initialize_enhanced_database",
        "initialize_ai_model_specs",
        "initialize_consensus_requirements",
        "initialize_enhanced_exchanges",
        "initialize_safety_rules",
        "initialize_compliance_monitoring",
        "load_openrouter_keys",
        "get_enhanced_ai_consensus",
        "_create_specialized_prompt",
        "_analyze_enhanced_consensus",
        "_create_default_consensus_result",
        "_store_enhanced_consensus_result",
        "extract_confidence",
        "setup_enhanced_flask_routes",
        "enhanced_dashboard",
        "api_enhanced_health",
        "api_enhanced_consensus",
        "render_enhanced_dashboard",
        "render_enhanced_exchange_cards",
        "run_enhanced_flask_app",
        "start_enhanced_system",
        "update_portfolio",
        "get_enhanced_consensus_price",
        "main"
      ],
      "imports": [
        "import asyncio",
        "import aiohttp",
        "import ccxt",
        "import json",
        "import sqlite3",
        "import logging",
        "import time",
        "import os",
        "import hashlib",
        "import hmac",
        "import base64",
        "import secrets",
        "from cryptography.hazmat.primitives import hashes",
        "from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC",
        "from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes",
        "from cryptography.hazmat.backends import default_backend",
        "import requests",
        "import pandas as pd",
        "import numpy as np",
        "import subprocess",
        "import threading",
        "import websocket",
        "import ssl",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Optional, Any, Tuple, Union",
        "from dataclasses import dataclass, asdict",
        "from enum import Enum",
        "from flask import Flask, render_template, jsonify, request",
        "from concurrent.futures import ThreadPoolExecutor, as_completed",
        "import yfinance as yf",
        "from pycoingecko import CoinGeckoAPI",
        "import plotly.graph_objs as go",
        "import plotly.utils",
        "import re"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/COMPREHENSIVE_SYSTEM_ANALYSIS_FOR_AI_CONSENSUS.py": {
      "size": 34157,
      "lines": 761,
      "type": "py",
      "functions": [
        "__init__",
        "discover_all_systems",
        "categorize_python_file",
        "discover_strategies",
        "discover_containerization",
        "discover_ngrok_configs",
        "discover_ai_systems",
        "discover_exchange_systems",
        "discover_dashboard_systems",
        "discover_compliance_systems",
        "get_openrouter_ai_consensus",
        "analyze_ai_consensus",
        "create_ultimate_consolidated_system",
        "generate_ultimate_system_code",
        "__init__",
        "initialize_all_components",
        "run_ultimate_system",
        "main",
        "generate_component_initialization",
        "generate_basic_consolidated_system",
        "__init__",
        "run",
        "main",
        "main"
      ],
      "imports": [
        "import asyncio",
        "import aiohttp",
        "import json",
        "import os",
        "import time",
        "import logging",
        "import sqlite3",
        "from datetime import datetime",
        "from typing import Dict, List, Any, Optional",
        "import subprocess",
        "import requests",
        "from concurrent.futures import ThreadPoolExecutor, as_completed",
        "import asyncio",
        "import aiohttp",
        "import json",
        "import logging",
        "import sqlite3",
        "import docker",
        "import kubernetes",
        "from datetime import datetime",
        "from typing import Dict, List, Any, Optional",
        "from dataclasses import dataclass",
        "from enum import Enum",
        "import ccxt",
        "import pandas as pd",
        "import numpy as np",
        "from flask import Flask, render_template, jsonify",
        "from cryptography.fernet import Fernet",
        "import prometheus_client",
        "from prometheus_client import Counter, Histogram, Gauge",
        "import asyncio",
        "import logging"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/ULTIMATE_CONSOLIDATED_SYSTEM_AI_CONSENSUS.py": {
      "size": 43839,
      "lines": 1095,
      "type": "py",
      "functions": [
        "__init__",
        "initialize_all_components",
        "initialize_database",
        "initialize_exchanges",
        "initialize_strategies",
        "initialize_containerization",
        "initialize_networking",
        "initialize_compliance",
        "initialize_security",
        "initialize_dashboard",
        "setup_dashboard_routes",
        "dashboard_home",
        "api_health",
        "api_portfolio",
        "api_ai_consensus",
        "render_dashboard",
        "render_exchange_cards",
        "render_strategy_list",
        "get_portfolio_summary",
        "get_ai_consensus",
        "store_ai_consensus",
        "log_compliance_event",
        "update_metrics",
        "run_system_monitoring",
        "check_system_health",
        "run_ultimate_system",
        "run_dashboard",
        "main"
      ],
      "imports": [
        "import asyncio",
        "import aiohttp",
        "import json",
        "import logging",
        "import sqlite3",
        "import os",
        "import time",
        "import subprocess",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Any, Optional, Union",
        "from dataclasses import dataclass, asdict",
        "from enum import Enum",
        "import ccxt",
        "import pandas as pd",
        "import numpy as np",
        "from flask import Flask, render_template, jsonify, request",
        "from cryptography.fernet import Fernet",
        "import hashlib",
        "import hmac",
        "import base64",
        "from concurrent.futures import ThreadPoolExecutor, as_completed",
        "import threading",
        "import queue",
        "import websocket",
        "import requests"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/OPENROUTER_AI_CONSENSUS_100_PERCENT_COMPLIANCE.py": {
      "size": 58141,
      "lines": 1291,
      "type": "py",
      "functions": [
        "__init__",
        "get_comprehensive_ai_consensus",
        "create_comprehensive_analysis_prompt",
        "analyze_comprehensive_consensus",
        "extract_architecture_recommendations",
        "extract_security_recommendations",
        "extract_compliance_recommendations",
        "extract_deployment_recommendations",
        "extract_performance_recommendations",
        "extract_monitoring_recommendations",
        "extract_risk_recommendations",
        "extract_integration_recommendations",
        "identify_priority_actions",
        "generate_implementation_roadmap",
        "generate_ultimate_system_code",
        "__init__",
        "initialize_all_components",
        "initialize_military_grade_security",
        "initialize_all_12_exchanges",
        "initialize_all_17_strategies",
        "initialize_hummingbot_integration",
        "initialize_australian_compliance",
        "initialize_professional_monitoring",
        "initialize_5_phase_commissioning",
        "run_ultimate_system",
        "start_all_subsystems",
        "start_monitoring_system",
        "start_security_system",
        "start_compliance_system",
        "start_exchange_connections",
        "start_strategy_engines",
        "start_hummingbot_integration",
        "main",
        "format_recommendations_for_code",
        "main"
      ],
      "imports": [
        "import asyncio",
        "import aiohttp",
        "import json",
        "import logging",
        "import os",
        "import time",
        "from datetime import datetime",
        "from typing import Dict, List, Any, Optional",
        "import hashlib",
        "import asyncio",
        "import aiohttp",
        "import json",
        "import logging",
        "import sqlite3",
        "import os",
        "import time",
        "import subprocess",
        "import hashlib",
        "import hmac",
        "import base64",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Any, Optional, Union",
        "from dataclasses import dataclass, asdict",
        "from enum import Enum",
        "import ccxt",
        "import pandas as pd",
        "import numpy as np",
        "from flask import Flask, render_template, jsonify, request",
        "from cryptography.fernet import Fernet",
        "from cryptography.hazmat.primitives import hashes",
        "from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC",
        "from concurrent.futures import ThreadPoolExecutor, as_completed",
        "import threading",
        "import queue",
        "import websocket",
        "import requests",
        "import redis",
        "import prometheus_client",
        "from prometheus_client import Counter, Histogram, Gauge"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/ULTIMATE_100_PERCENT_COMPLIANCE_SYSTEM.py": {
      "size": 25755,
      "lines": 662,
      "type": "py",
      "functions": [
        "__init__",
        "initialize_all_components",
        "initialize_military_grade_security",
        "initialize_all_12_exchanges",
        "initialize_all_17_strategies",
        "initialize_hummingbot_integration",
        "initialize_australian_compliance",
        "initialize_professional_monitoring",
        "initialize_5_phase_commissioning",
        "run_ultimate_system",
        "start_all_subsystems",
        "start_monitoring_system",
        "start_security_system",
        "start_compliance_system",
        "start_exchange_connections",
        "start_strategy_engines",
        "start_hummingbot_integration",
        "main"
      ],
      "imports": [
        "import asyncio",
        "import aiohttp",
        "import json",
        "import logging",
        "import sqlite3",
        "import os",
        "import time",
        "import subprocess",
        "import hashlib",
        "import hmac",
        "import base64",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Any, Optional, Union",
        "from dataclasses import dataclass, asdict",
        "from enum import Enum",
        "import ccxt",
        "import pandas as pd",
        "import numpy as np",
        "from flask import Flask, render_template, jsonify, request",
        "from cryptography.fernet import Fernet",
        "from cryptography.hazmat.primitives import hashes",
        "from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC",
        "from concurrent.futures import ThreadPoolExecutor, as_completed",
        "import threading",
        "import queue",
        "import websocket",
        "import requests",
        "import redis",
        "import prometheus_client",
        "from prometheus_client import Counter, Histogram, Gauge"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/ai_consensus_100_percent_results.json": {
      "size": 49153,
      "lines": 178,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/ULTIMATE_CONTAINERIZATION_AI_CONSENSUS.py": {
      "size": 51057,
      "lines": 1337,
      "type": "py",
      "functions": [
        "__init__",
        "get_containerization_consensus",
        "create_containerization_prompt",
        "analyze_containerization_consensus",
        "extract_architecture_recommendations",
        "extract_orchestration_recommendations",
        "extract_networking_recommendations",
        "extract_data_recommendations",
        "extract_security_recommendations",
        "extract_development_recommendations",
        "extract_deployment_recommendations",
        "extract_monitoring_recommendations",
        "extract_scaling_recommendations",
        "extract_maintenance_recommendations",
        "generate_containerization_plan",
        "generate_containerization_artifacts",
        "generate_docker_compose",
        "generate_dockerfile",
        "generate_kubernetes_manifests",
        "generate_helm_chart",
        "generate_cicd_pipeline",
        "generate_monitoring_config",
        "main"
      ],
      "imports": [
        "import asyncio",
        "import aiohttp",
        "import json",
        "import logging",
        "import os",
        "import time",
        "from datetime import datetime",
        "from typing import Dict, List, Any, Optional",
        "import yaml"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/ULTIMATE_CONTAINERIZED_ECOSYSTEM.py": {
      "size": 33851,
      "lines": 870,
      "type": "py",
      "functions": [
        "__init__",
        "generate_complete_docker_compose",
        "generate_kubernetes_manifests",
        "generate_helm_chart",
        "generate_dockerfiles",
        "generate_cicd_pipeline",
        "_generate_service_list_for_ci",
        "generate_monitoring_config",
        "save_all_artifacts",
        "main"
      ],
      "imports": [
        "import os",
        "import json",
        "import yaml",
        "from datetime import datetime",
        "from typing import Dict, List, Any"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/ULTIMATE_DASHBOARD_AI_ENHANCED.py": {
      "size": 41696,
      "lines": 1057,
      "type": "py",
      "functions": [
        "__init__",
        "_initialize_military_security",
        "_initialize_redis_cache",
        "_initialize_prometheus_metrics",
        "_initialize_microservices",
        "_initialize_compliance_engine",
        "_initialize_performance_monitor",
        "get_real_time_data",
        "_get_ai_consensus_data",
        "_get_portfolio_data",
        "_get_exchange_data",
        "_get_strategy_data",
        "_get_risk_data",
        "_get_compliance_data",
        "_get_performance_data",
        "_get_security_data",
        "_get_monitoring_data",
        "_setup_routes",
        "dashboard",
        "api_data",
        "health_check",
        "metrics",
        "_setup_websocket_handlers",
        "handle_connect",
        "handle_disconnect",
        "handle_update_request",
        "_get_enhanced_dashboard_template",
        "main"
      ],
      "imports": [
        "import asyncio",
        "import aiohttp",
        "import json",
        "import time",
        "import hashlib",
        "import hmac",
        "import base64",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Any, Optional",
        "from dataclasses import dataclass",
        "from flask import Flask, render_template_string, jsonify, request, session",
        "from flask_socketio import SocketIO, emit",
        "import redis",
        "import prometheus_client",
        "from prometheus_client import Counter, Histogram, Gauge",
        "import logging",
        "import jwt",
        "from cryptography.fernet import Fernet",
        "from cryptography.hazmat.primitives import hashes",
        "from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC",
        "import os"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/ULTIMATE_DASHBOARD_AI_ENHANCED_8751.py": {
      "size": 41696,
      "lines": 1057,
      "type": "py",
      "functions": [
        "__init__",
        "_initialize_military_security",
        "_initialize_redis_cache",
        "_initialize_prometheus_metrics",
        "_initialize_microservices",
        "_initialize_compliance_engine",
        "_initialize_performance_monitor",
        "get_real_time_data",
        "_get_ai_consensus_data",
        "_get_portfolio_data",
        "_get_exchange_data",
        "_get_strategy_data",
        "_get_risk_data",
        "_get_compliance_data",
        "_get_performance_data",
        "_get_security_data",
        "_get_monitoring_data",
        "_setup_routes",
        "dashboard",
        "api_data",
        "health_check",
        "metrics",
        "_setup_websocket_handlers",
        "handle_connect",
        "handle_disconnect",
        "handle_update_request",
        "_get_enhanced_dashboard_template",
        "main"
      ],
      "imports": [
        "import asyncio",
        "import aiohttp",
        "import json",
        "import time",
        "import hashlib",
        "import hmac",
        "import base64",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Any, Optional",
        "from dataclasses import dataclass",
        "from flask import Flask, render_template_string, jsonify, request, session",
        "from flask_socketio import SocketIO, emit",
        "import redis",
        "import prometheus_client",
        "from prometheus_client import Counter, Histogram, Gauge",
        "import logging",
        "import jwt",
        "from cryptography.fernet import Fernet",
        "from cryptography.hazmat.primitives import hashes",
        "from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC",
        "import os"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/PRODUCTION_READINESS_AI_CONSENSUS_ANALYSIS.py": {
      "size": 83984,
      "lines": 1998,
      "type": "py",
      "functions": [
        "__init__",
        "run_comprehensive_analysis",
        "discover_system_components",
        "test_dashboard_availability",
        "test_api_availability",
        "test_infrastructure",
        "test_system_resources",
        "test_network_connectivity",
        "test_file_system",
        "test_process_health",
        "test_all_services",
        "test_dashboard_services",
        "test_api_services",
        "comprehensive_service_test",
        "basic_load_test",
        "make_request",
        "test_database_services",
        "test_background_services",
        "test_ngrok_process",
        "test_python_services",
        "test_system_monitoring",
        "assess_security",
        "test_encryption_implementation",
        "test_authentication_mechanisms",
        "test_audit_logging",
        "basic_vulnerability_scan",
        "scan_open_ports",
        "check_file_permissions",
        "check_service_exposure",
        "test_performance",
        "test_response_times",
        "test_throughput",
        "make_concurrent_request",
        "test_resource_utilization",
        "assess_scalability",
        "verify_compliance",
        "verify_australian_compliance",
        "verify_data_protection",
        "verify_audit_compliance",
        "assess_iso_standards",
        "has_security_controls",
        "has_risk_management",
        "has_incident_management",
        "has_access_controls",
        "has_documentation",
        "has_process_controls",
        "has_monitoring",
        "has_continuous_improvement",
        "has_service_catalog",
        "has_change_management",
        "has_service_monitoring",
        "has_service_reporting",
        "get_ai_consensus_analysis",
        "prepare_system_summary",
        "query_openrouter_model",
        "calculate_production_readiness",
        "assess_iso_compliance",
        "generate_recommendations",
        "add_test_result",
        "test_to_dict",
        "save_analysis_results",
        "main"
      ],
      "imports": [
        "import asyncio",
        "import aiohttp",
        "import json",
        "import time",
        "import subprocess",
        "import psutil",
        "import requests",
        "import sqlite3",
        "import os",
        "import sys",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Any, Optional, Tuple",
        "import logging",
        "from dataclasses import dataclass",
        "import concurrent.futures",
        "import threading"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/production_readiness_analysis.json": {
      "size": 89810,
      "lines": 1799,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/ULTIMATE_ALL_AI_CONSENSUS_PRODUCTION_SYSTEM.py": {
      "size": 26662,
      "lines": 540,
      "type": "py",
      "functions": [
        "__init__",
        "query_ai_model",
        "run_comprehensive_analysis",
        "analyze_current_system",
        "calculate_consensus",
        "generate_final_assessment",
        "save_results",
        "main"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import asyncio",
        "import aiohttp",
        "import logging",
        "from datetime import datetime",
        "from typing import Dict, List, Any, Optional",
        "from dataclasses import dataclass",
        "import psutil",
        "import subprocess"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/ultimate_ai_consensus_results.json": {
      "size": 13553,
      "lines": 320,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/ULTIMATE_PRODUCTION_READY_SYSTEM_ALL_AI_CONSENSUS.py": {
      "size": 30804,
      "lines": 813,
      "type": "py",
      "functions": [
        "__init__",
        "__init__",
        "query_all_models",
        "_query_model",
        "_get_json_schema",
        "_analyze_consensus",
        "__init__",
        "setup_database",
        "setup_security",
        "setup_monitoring",
        "setup_routes",
        "dashboard",
        "health",
        "ai_consensus_endpoint",
        "production_status",
        "store_consensus_result",
        "get_dashboard_template",
        "__init__",
        "generate_docker_compose",
        "generate_kubernetes_manifests",
        "main",
        "run_flask"
      ],
      "imports": [
        "import asyncio",
        "import aiohttp",
        "import json",
        "import logging",
        "import sqlite3",
        "import time",
        "import os",
        "import sys",
        "import hashlib",
        "import hmac",
        "import base64",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Any, Optional",
        "from dataclasses import dataclass, asdict",
        "from cryptography.fernet import Fernet",
        "from cryptography.hazmat.primitives import hashes",
        "from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC",
        "import ccxt",
        "import pandas as pd",
        "import numpy as np",
        "from flask import Flask, jsonify, render_template_string, request",
        "import threading",
        "import subprocess",
        "import docker",
        "import yaml",
        "import re",
        "from collections import Counter"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/docker-compose.yml": {
      "size": 1262,
      "lines": 64,
      "type": "yml",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/kubernetes-manifests.yaml": {
      "size": 883,
      "lines": 48,
      "type": "yaml",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/ULTIMATE_GROK_AI_CONSENSUS_SYSTEM.py": {
      "size": 23946,
      "lines": 585,
      "type": "py",
      "functions": [
        "__init__",
        "analyze_complete_system",
        "gather_system_data",
        "analyze_manus_sandbox",
        "analyze_ngrok_status",
        "analyze_lyra_system",
        "analyze_ubuntu_system",
        "analyze_docker_containers",
        "analyze_running_services",
        "analyze_system_performance",
        "analyze_security_status",
        "analyze_compliance_status",
        "analyze_ai_models_status",
        "get_grok_consensus",
        "get_all_ai_consensus",
        "combine_analyses",
        "extract_recommendations",
        "calculate_production_score",
        "get_recent_file_activity",
        "get_directory_size",
        "test_url_connectivity",
        "get_service_health",
        "main"
      ],
      "imports": [
        "import os",
        "import json",
        "import time",
        "import asyncio",
        "import aiohttp",
        "import logging",
        "from datetime import datetime",
        "from pathlib import Path",
        "from typing import Dict, List, Any",
        "import subprocess",
        "import psutil",
        "import docker",
        "from openai import OpenAI",
        "import requests",
        "import requests"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/ultimate_grok_consensus_results.json": {
      "size": 28497,
      "lines": 87,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/AI_HIERARCHY_ISSUE_RESOLUTION_SYSTEM.py": {
      "size": 35887,
      "lines": 871,
      "type": "py",
      "functions": [
        "__init__",
        "resolve_all_issues",
        "get_ai_hierarchy_solutions",
        "query_ai_model",
        "generate_consensus_solution",
        "execute_resolution",
        "resolve_docker_issue",
        "resolve_memory_issue",
        "resolve_dashboard_issue",
        "unified_dashboard",
        "health",
        "resolve_monitoring_issue",
        "collect_metrics",
        "resolve_load_testing_issue",
        "load_test",
        "resolve_disaster_recovery_issue",
        "verify_resolution",
        "generate_final_system_status",
        "calculate_final_score",
        "main"
      ],
      "imports": [
        "import os",
        "import json",
        "import time",
        "import asyncio",
        "import aiohttp",
        "import logging",
        "import subprocess",
        "import docker",
        "import psutil",
        "from datetime import datetime",
        "from pathlib import Path",
        "from typing import Dict, List, Any, Tuple",
        "from openai import OpenAI",
        "from flask import Flask, render_template_string, jsonify",
        "import json",
        "from datetime import datetime",
        "import psutil",
        "import json",
        "import time",
        "from datetime import datetime",
        "import asyncio",
        "import aiohttp",
        "import time",
        "from datetime import datetime",
        "import json",
        "import requests"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/ULTIMATE_AI_CONSENSUS_ECOSYSTEM_INTEGRATION.py": {
      "size": 69498,
      "lines": 1834,
      "type": "py",
      "functions": [
        "__init__",
        "execute_complete_integration",
        "capture_entire_system",
        "init_knowledge_database",
        "inventory_all_components",
        "store_in_knowledge_base",
        "capture_running_services",
        "store_services_data",
        "capture_system_metrics",
        "store_metrics_data",
        "capture_ai_configurations",
        "store_ai_config",
        "calculate_total_size",
        "get_comprehensive_ai_consensus",
        "load_grok_results",
        "get_current_system_state",
        "query_ai_for_improvements",
        "generate_consensus_recommendations",
        "store_ai_consensus",
        "implement_ai_improvements",
        "implement_recommendation",
        "implement_performance_optimizations",
        "__init__",
        "collect_baseline",
        "optimize_system",
        "generate_report",
        "implement_security_enhancements",
        "__init__",
        "audit_file_permissions",
        "audit_api_keys",
        "generate_security_report",
        "implement_monitoring_improvements",
        "monitoring_dashboard",
        "get_metrics",
        "implement_scalability_improvements",
        "__init__",
        "check_scaling_conditions",
        "execute_scaling",
        "implement_documentation_improvements",
        "create_ultimate_ecosystem",
        "create_ecosystem_controller",
        "__init__",
        "setup_routes",
        "ecosystem_health",
        "list_services",
        "ecosystem_metrics",
        "run",
        "integrate_all_services",
        "create_api_gateway",
        "__init__",
        "setup_routes",
        "gateway_health",
        "proxy_request",
        "run",
        "setup_monitoring_stack",
        "verify_ecosystem_integration",
        "calculate_ecosystem_performance",
        "assess_deployment_readiness",
        "generate_deployment_package",
        "calculate_final_scores",
        "main"
      ],
      "imports": [
        "import os",
        "import json",
        "import time",
        "import asyncio",
        "import aiohttp",
        "import logging",
        "import subprocess",
        "import sqlite3",
        "import shutil",
        "from datetime import datetime",
        "from pathlib import Path",
        "from typing import Dict, List, Any, Tuple",
        "from openai import OpenAI",
        "import psutil",
        "import docker",
        "import psutil",
        "import json",
        "import time",
        "from datetime import datetime",
        "import os",
        "import json",
        "import hashlib",
        "from datetime import datetime",
        "from flask import Flask, render_template_string, jsonify",
        "import json",
        "import psutil",
        "from datetime import datetime",
        "import os",
        "import time",
        "import psutil",
        "import subprocess",
        "import json",
        "from datetime import datetime",
        "from flask import Flask, jsonify, request",
        "import json",
        "import requests",
        "import asyncio",
        "from datetime import datetime",
        "from flask import Flask, request, jsonify",
        "import requests",
        "import json",
        "from datetime import datetime",
        "import requests"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/UNIFIED_DASHBOARD.py": {
      "size": 2518,
      "lines": 69,
      "type": "py",
      "functions": [
        "unified_dashboard",
        "health"
      ],
      "imports": [
        "from flask import Flask, render_template_string, jsonify",
        "import json",
        "from datetime import datetime"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/PERFORMANCE_OPTIMIZER.py": {
      "size": 1651,
      "lines": 52,
      "type": "py",
      "functions": [
        "__init__",
        "collect_baseline",
        "optimize_system",
        "generate_report"
      ],
      "imports": [
        "import psutil",
        "import json",
        "import time",
        "from datetime import datetime"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/performance_optimization_report.json": {
      "size": 733,
      "lines": 33,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/SECURITY_AUDITOR.py": {
      "size": 1748,
      "lines": 54,
      "type": "py",
      "functions": [
        "__init__",
        "audit_file_permissions",
        "audit_api_keys",
        "generate_security_report"
      ],
      "imports": [
        "import os",
        "import json",
        "import hashlib",
        "from datetime import datetime"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/security_audit_report.json": {
      "size": 623,
      "lines": 25,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/MONITORING_DASHBOARD.py": {
      "size": 3252,
      "lines": 83,
      "type": "py",
      "functions": [
        "monitoring_dashboard",
        "get_metrics"
      ],
      "imports": [
        "from flask import Flask, render_template_string, jsonify",
        "import json",
        "import psutil",
        "from datetime import datetime",
        "import os",
        "import time"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/load_balancer_config.json": {
      "size": 416,
      "lines": 26,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/AUTO_SCALER.py": {
      "size": 1519,
      "lines": 45,
      "type": "py",
      "functions": [
        "__init__",
        "check_scaling_conditions",
        "execute_scaling"
      ],
      "imports": [
        "import psutil",
        "import subprocess",
        "import json",
        "from datetime import datetime"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/ECOSYSTEM_CONTROLLER.py": {
      "size": 2633,
      "lines": 71,
      "type": "py",
      "functions": [
        "__init__",
        "setup_routes",
        "ecosystem_health",
        "list_services",
        "ecosystem_metrics",
        "run"
      ],
      "imports": [
        "from flask import Flask, jsonify, request",
        "import json",
        "import requests",
        "import asyncio",
        "from datetime import datetime"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/service_integration_config.json": {
      "size": 398,
      "lines": 20,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/API_GATEWAY.py": {
      "size": 1855,
      "lines": 53,
      "type": "py",
      "functions": [
        "__init__",
        "setup_routes",
        "gateway_health",
        "proxy_request",
        "run"
      ],
      "imports": [
        "from flask import Flask, request, jsonify",
        "import requests",
        "import json",
        "from datetime import datetime"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/monitoring_stack_config.json": {
      "size": 444,
      "lines": 26,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/deploy.sh": {
      "size": 726,
      "lines": 26,
      "type": "sh",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/ultimate_ecosystem_integration_results.json": {
      "size": 179897,
      "lines": 2956,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/monitoring_config.json": {
      "size": 279,
      "lines": 17,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/MONITORING_COLLECTOR.py": {
      "size": 673,
      "lines": 23,
      "type": "py",
      "functions": [
        "collect_metrics"
      ],
      "imports": [
        "import psutil",
        "import json",
        "import time",
        "from datetime import datetime"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/LOAD_TESTER.py": {
      "size": 2407,
      "lines": 63,
      "type": "py",
      "functions": [
        "load_test"
      ],
      "imports": [
        "import asyncio",
        "import aiohttp",
        "import time",
        "from datetime import datetime",
        "import json"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/load_test_results.json": {
      "size": 2279,
      "lines": 83,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/ULTIMATE_AI_TEAM_COMMISSIONING_SYSTEM.py": {
      "size": 102706,
      "lines": 2397,
      "type": "py",
      "functions": [
        "__init__",
        "execute_complete_commissioning",
        "initialize_commissioning_infrastructure",
        "init_commissioning_database",
        "create_test_framework",
        "setUp",
        "tearDown",
        "test_service_availability",
        "test_performance_benchmarks",
        "test_api_response_times",
        "test_database_integrity",
        "test_security_configuration",
        "test_ai_model_connectivity",
        "test_compliance_requirements",
        "setup_commissioning_monitoring",
        "commissioning_dashboard",
        "commissioning_status",
        "initialize_compliance_framework",
        "engage_complete_ai_team",
        "get_comprehensive_system_state",
        "query_ai_model",
        "generate_commissioning_consensus",
        "store_ai_team_responses",
        "generate_comprehensive_test_suite",
        "generate_service_availability_tests",
        "generate_performance_tests",
        "generate_security_tests",
        "generate_compliance_tests",
        "generate_api_tests",
        "generate_database_tests",
        "generate_monitoring_tests",
        "generate_disaster_recovery_tests",
        "execute_commissioning_tests",
        "execute_automated_tests",
        "execute_individual_test",
        "execute_service_test",
        "execute_performance_test",
        "execute_security_test",
        "execute_api_test",
        "execute_database_test",
        "execute_monitoring_test",
        "execute_manual_tests",
        "execute_compliance_tests",
        "verify_iso_compliance",
        "verify_iso_standard",
        "store_compliance_verification",
        "execute_controlled_live_commissioning",
        "execute_commissioning_phase",
        "commission_individual_service",
        "store_commissioning_phase",
        "generate_production_certificate",
        "calculate_production_readiness_score",
        "generate_certificate_document",
        "calculate_commissioning_score",
        "main"
      ],
      "imports": [
        "import os",
        "import json",
        "import time",
        "import asyncio",
        "import aiohttp",
        "import logging",
        "import subprocess",
        "import sqlite3",
        "import hashlib",
        "import psutil",
        "import requests",
        "from datetime import datetime, timedelta",
        "from pathlib import Path",
        "from typing import Dict, List, Any, Tuple",
        "from openai import OpenAI",
        "import concurrent.futures",
        "from dataclasses import dataclass",
        "import yaml",
        "import unittest",
        "import requests",
        "import time",
        "import psutil",
        "import sqlite3",
        "import json",
        "import subprocess",
        "from datetime import datetime",
        "from typing import Dict, List, Any",
        "import os",
        "from flask import Flask, jsonify, render_template_string",
        "import psutil",
        "import sqlite3",
        "import json",
        "from datetime import datetime"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/COMMISSIONING_TEST_FRAMEWORK.py": {
      "size": 5673,
      "lines": 138,
      "type": "py",
      "functions": [
        "setUp",
        "tearDown",
        "test_service_availability",
        "test_performance_benchmarks",
        "test_api_response_times",
        "test_database_integrity",
        "test_security_configuration",
        "test_ai_model_connectivity",
        "test_compliance_requirements"
      ],
      "imports": [
        "import unittest",
        "import requests",
        "import time",
        "import psutil",
        "import sqlite3",
        "import json",
        "import subprocess",
        "from datetime import datetime",
        "from typing import Dict, List, Any",
        "import os"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/COMMISSIONING_MONITOR.py": {
      "size": 6444,
      "lines": 149,
      "type": "py",
      "functions": [
        "commissioning_dashboard",
        "commissioning_status"
      ],
      "imports": [
        "from flask import Flask, jsonify, render_template_string",
        "import psutil",
        "import sqlite3",
        "import json",
        "from datetime import datetime"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/compliance_framework.json": {
      "size": 834,
      "lines": 32,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/BACKUP_SYSTEM.sh": {
      "size": 658,
      "lines": 20,
      "type": "sh",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/disaster_recovery_plan.json": {
      "size": 415,
      "lines": 15,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/ai_hierarchy_resolution_results.json": {
      "size": 3912,
      "lines": 128,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/production_certificate_PROD_CERT_b6e598b8.json": {
      "size": 1557,
      "lines": 24,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/commissioning_results_b6e598b8.json": {
      "size": 88816,
      "lines": 1082,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/GROK_ALL_AI_100_PERCENT_ANALYSIS.py": {
      "size": 14961,
      "lines": 380,
      "type": "py",
      "functions": [
        "__init__",
        "load_current_gaps",
        "query_ai_model",
        "analyze_100_percent_requirements",
        "generate_100_percent_roadmap",
        "save_results",
        "run_complete_analysis"
      ],
      "imports": [
        "import json",
        "import time",
        "import logging",
        "import requests",
        "from datetime import datetime",
        "from typing import Dict, List, Any",
        "import sqlite3",
        "import os"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/grok_100_percent_analysis_grok_100_1759307756.json": {
      "size": 101724,
      "lines": 180,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/IMPLEMENT_100_PERCENT_FIXES.py": {
      "size": 11675,
      "lines": 304,
      "type": "py",
      "functions": [
        "__init__",
        "log_fix",
        "fix_unreachable_services",
        "fix_degraded_services",
        "fix_failed_tests",
        "fix_service_8751",
        "fix_performance",
        "fix_ssl_certificates",
        "fix_ato_compliance",
        "fix_iso_compliance",
        "verify_all_fixes",
        "run_all_fixes"
      ],
      "imports": [
        "import subprocess",
        "import time",
        "import requests",
        "import json",
        "import os",
        "from datetime import datetime",
        "import sqlite3"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/fix_results.json": {
      "size": 1784,
      "lines": 65,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/GROK_COMPLETE_REMAINING_FIXES.py": {
      "size": 13433,
      "lines": 334,
      "type": "py",
      "functions": [
        "__init__",
        "grok_analyze_remaining_issues",
        "factcheck_system_state",
        "halftruth_detection",
        "numbers_audit",
        "fix_missing_ai_dashboard",
        "create_minimal_ai_dashboard",
        "health",
        "dashboard",
        "fix_unhealthy_monitoring_services",
        "run_final_verification",
        "execute_complete_fix"
      ],
      "imports": [
        "import requests",
        "import json",
        "import subprocess",
        "import time",
        "import os",
        "from datetime import datetime",
        "from flask import Flask, jsonify",
        "from datetime import datetime",
        "import threading",
        "import time"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/ULTIMATE_COMPREHENSIVE_DISCOVERY_ALL_RESOURCES.py": {
      "size": 17295,
      "lines": 397,
      "type": "py",
      "functions": [
        "__init__",
        "discover_all_files",
        "discover_all_apis",
        "discover_manus_tools",
        "discover_mcp_servers",
        "discover_running_services",
        "discover_databases",
        "discover_hidden_capabilities",
        "run_complete_discovery"
      ],
      "imports": [
        "import os",
        "import subprocess",
        "import requests",
        "import json",
        "import sqlite3",
        "from datetime import datetime",
        "import glob"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/ULTIMATE_DASHBOARD_AI_ENHANCED_FIXED.py": {
      "size": 34663,
      "lines": 897,
      "type": "py",
      "functions": [
        "create_app",
        "__init__",
        "_initialize_military_security",
        "_initialize_redis_cache",
        "_initialize_prometheus_metrics",
        "_initialize_microservices",
        "_initialize_compliance_engine",
        "_initialize_performance_monitor",
        "_setup_routes",
        "dashboard",
        "api_data",
        "health_check",
        "_setup_websocket_handlers",
        "handle_connect",
        "handle_disconnect",
        "handle_update_request",
        "get_real_time_data",
        "_get_ai_consensus_data",
        "_get_portfolio_data",
        "_get_exchange_data",
        "_get_strategy_data",
        "_get_risk_data",
        "_get_compliance_data",
        "_get_performance_data",
        "_get_security_data",
        "_get_monitoring_data",
        "_get_enhanced_dashboard_template",
        "main"
      ],
      "imports": [
        "import asyncio",
        "import aiohttp",
        "import json",
        "import time",
        "import hashlib",
        "import hmac",
        "import base64",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Any, Optional",
        "from dataclasses import dataclass",
        "from flask import Flask, render_template_string, jsonify, request, session",
        "from flask_socketio import SocketIO, emit",
        "import redis",
        "import prometheus_client",
        "from prometheus_client import Counter, Histogram, Gauge",
        "import logging",
        "import jwt",
        "from cryptography.fernet import Fernet",
        "from cryptography.hazmat.primitives import hashes",
        "from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC",
        "import os"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/ULTIMATE_DASHBOARD_SIMPLE.py": {
      "size": 28697,
      "lines": 714,
      "type": "py",
      "functions": [
        "__init__",
        "_setup_routes",
        "dashboard",
        "api_data",
        "health_check",
        "_setup_websocket_handlers",
        "handle_connect",
        "handle_disconnect",
        "handle_update_request",
        "get_real_time_data",
        "_get_dashboard_template",
        "main"
      ],
      "imports": [
        "import asyncio",
        "import json",
        "import time",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Any, Optional",
        "from flask import Flask, render_template_string, jsonify, request",
        "from flask_socketio import SocketIO, emit",
        "import os",
        "from { opacity: 0; transform: translateY(-20px); }",
        "import traceback"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/performance_optimizer.py": {
      "size": 17544,
      "lines": 462,
      "type": "py",
      "functions": [
        "__init__",
        "_setup_logging",
        "collect_system_metrics",
        "_test_network_latency",
        "_test_api_response_time",
        "_test_database_performance",
        "_test_cache_performance",
        "analyze_performance_bottlenecks",
        "apply_optimizations",
        "_optimize_cpu_usage",
        "_optimize_memory_usage",
        "_optimize_api_performance",
        "_optimize_cache_performance",
        "_optimize_throughput",
        "_optimize_error_handling",
        "generate_performance_report",
        "_calculate_performance_score",
        "_generate_recommendations",
        "main"
      ],
      "imports": [
        "import asyncio",
        "import aiohttp",
        "import json",
        "import time",
        "import psutil",
        "import logging",
        "from datetime import datetime",
        "from typing import Dict, List, Any, Optional",
        "import concurrent.futures",
        "from dataclasses import dataclass",
        "import numpy as np",
        "import pandas as pd"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/performance_report.json": {
      "size": 830,
      "lines": 33,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/production_config.py": {
      "size": 15158,
      "lines": 490,
      "type": "py",
      "functions": [
        "__post_init__",
        "__init__",
        "apply_performance_optimizations",
        "_apply_system_optimizations",
        "_apply_database_optimizations",
        "_apply_cache_optimizations",
        "_apply_network_optimizations",
        "_apply_ai_optimizations",
        "_apply_security_optimizations",
        "generate_environment_file",
        "generate_docker_compose_production",
        "generate_nginx_config",
        "save_production_files",
        "main"
      ],
      "imports": [
        "import os",
        "import json",
        "from typing import Dict, Any, List",
        "from dataclasses import dataclass, asdict"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/docker-compose.production.yml": {
      "size": 2024,
      "lines": 99,
      "type": "yml",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/production_config_summary.json": {
      "size": 2934,
      "lines": 97,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/testing_framework.py": {
      "size": 3221,
      "lines": 99,
      "type": "py",
      "functions": [
        "__init__",
        "addSuccess",
        "addFailure",
        "addError",
        "_get_test_name",
        "_get_duration",
        "setUp",
        "tearDown",
        "run_async",
        "__init__",
        "run",
        "generate_report"
      ],
      "imports": [
        "import unittest",
        "import asyncio",
        "import json",
        "import time",
        "from datetime import datetime",
        "from typing import Dict, Any, List"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/test_api_endpoints.py": {
      "size": 1984,
      "lines": 49,
      "type": "py",
      "functions": [
        "test_health_check_endpoint",
        "test_logic",
        "test_api_data_endpoint",
        "test_logic",
        "test_trading_engine_health_check",
        "test_logic"
      ],
      "imports": [
        "import unittest",
        "import asyncio",
        "import aiohttp",
        "from testing_framework import LyraTestCase"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/test_trading_engine.py": {
      "size": 1759,
      "lines": 47,
      "type": "py",
      "functions": [
        "test_decision_making_process",
        "test_logic",
        "test_profit_generation",
        "test_logic",
        "test_ai_evolution_cycles",
        "test_logic"
      ],
      "imports": [
        "import unittest",
        "import asyncio",
        "from testing_framework import LyraTestCase"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/test_security_monitoring.py": {
      "size": 1315,
      "lines": 39,
      "type": "py",
      "functions": [
        "test_firewall_rules",
        "test_token_authentication",
        "test_system_resource_stability"
      ],
      "imports": [
        "import unittest",
        "import asyncio",
        "import psutil",
        "from testing_framework import LyraTestCase"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/test_suite.py": {
      "size": 941,
      "lines": 29,
      "type": "py",
      "functions": [
        "create_suite"
      ],
      "imports": [
        "import unittest",
        "from testing_framework import LyraTestRunner",
        "from test_api_endpoints import TestApiEndpoints",
        "from test_trading_engine import TestTradingEngine",
        "from test_security_monitoring import TestSecurityAndMonitoring"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/test_report.json": {
      "size": 5415,
      "lines": 57,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/grok_validation.py": {
      "size": 7629,
      "lines": 187,
      "type": "py",
      "functions": [
        "__init__",
        "get_ai_feedback",
        "run_validation",
        "_read_files",
        "_create_prompt",
        "_generate_report",
        "_summarize_feedback",
        "main"
      ],
      "imports": [
        "import os",
        "import asyncio",
        "import json",
        "import datetime",
        "import httpx",
        "from typing import Dict, Any, List"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/validation_report.json": {
      "size": 1304,
      "lines": 22,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/MAXIMUM_AMPLIFICATION_SYSTEM.py": {
      "size": 20194,
      "lines": 549,
      "type": "py",
      "functions": [
        "__init__",
        "_initialize_ai_models",
        "_initialize_exchanges",
        "_initialize_database",
        "_setup_routes",
        "dashboard",
        "health",
        "api_status",
        "activate_trading",
        "deactivate_trading",
        "get_performance",
        "get_ai_consensus",
        "_get_dashboard_template",
        "_get_ai_consensus",
        "_start_trading_engine",
        "trading_loop",
        "_execute_trade",
        "_log_trade",
        "_update_performance_metrics",
        "run"
      ],
      "imports": [
        "import asyncio",
        "import json",
        "import logging",
        "import os",
        "import time",
        "from datetime import datetime",
        "from typing import Dict, List, Any, Optional",
        "from flask import Flask, jsonify, request, render_template_string",
        "import requests",
        "import threading",
        "import sqlite3",
        "from dataclasses import dataclass"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/HUMMINGBOT_INTEGRATION_SYSTEM.py": {
      "size": 27834,
      "lines": 732,
      "type": "py",
      "functions": [
        "__init__",
        "_initialize_strategies",
        "_initialize_ai_optimizer",
        "_initialize_exchange_connectors",
        "_initialize_database",
        "_setup_routes",
        "dashboard",
        "health",
        "get_strategies",
        "start_strategy",
        "stop_strategy",
        "optimize_strategies",
        "get_performance",
        "_get_dashboard_template",
        "_start_strategy",
        "_stop_strategy",
        "_optimize_strategies_with_ai",
        "run"
      ],
      "imports": [
        "import asyncio",
        "import json",
        "import logging",
        "import os",
        "import time",
        "from datetime import datetime",
        "from typing import Dict, List, Any, Optional",
        "from flask import Flask, jsonify, request, render_template_string",
        "import requests",
        "import threading",
        "import sqlite3",
        "from dataclasses import dataclass, asdict"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/DEPLOY_TO_USER_UBUNTU.sh": {
      "size": 3575,
      "lines": 128,
      "type": "sh",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/PUSH_TO_UBUNTU.sh": {
      "size": 4351,
      "lines": 137,
      "type": "sh",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/commissioning_phase1_verification.py": {
      "size": 3455,
      "lines": 107,
      "type": "py",
      "functions": [
        "run_command",
        "verify_processes",
        "verify_ports",
        "verify_files",
        "generate_report"
      ],
      "imports": [
        "import os",
        "import json",
        "import subprocess"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/commissioning_phase2_verification.py": {
      "size": 3050,
      "lines": 82,
      "type": "py",
      "functions": [
        "check_api_connectivity",
        "load_env",
        "generate_report"
      ],
      "imports": [
        "import os",
        "import json",
        "import asyncio",
        "import httpx",
        "from dotenv import load_dotenv"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/commissioning_phase3_verification.py": {
      "size": 4807,
      "lines": 130,
      "type": "py",
      "functions": [
        "query_ai_model",
        "calculate_consensus",
        "generate_report"
      ],
      "imports": [
        "import os",
        "import json",
        "import asyncio",
        "import httpx",
        "from dotenv import load_dotenv"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/commissioning_phase4_verification.py": {
      "size": 4424,
      "lines": 116,
      "type": "py",
      "functions": [
        "load_env",
        "verify_financial_settings",
        "simulate_never_sell_at_loss",
        "generate_report"
      ],
      "imports": [
        "import os",
        "from dotenv import load_dotenv"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/commissioning_phase5_verification.py": {
      "size": 4665,
      "lines": 123,
      "type": "py",
      "functions": [
        "load_env",
        "verify_security_env_vars",
        "verify_compliance_files",
        "verify_audit_logging",
        "generate_report"
      ],
      "imports": [
        "import os",
        "from dotenv import load_dotenv"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/commissioning_phase3_multi_key_verification.py": {
      "size": 3951,
      "lines": 96,
      "type": "py",
      "functions": [
        "query_ai_model",
        "generate_report"
      ],
      "imports": [
        "import os",
        "import json",
        "import asyncio",
        "import httpx",
        "from dotenv import load_dotenv"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/commissioning_phase3_definitive_verification.py": {
      "size": 4603,
      "lines": 123,
      "type": "py",
      "functions": [
        "query_ai_model",
        "calculate_consensus",
        "generate_report"
      ],
      "imports": [
        "import os",
        "import json",
        "import asyncio",
        "import httpx",
        "from dotenv import load_dotenv"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/get_openrouter_models.py": {
      "size": 1444,
      "lines": 40,
      "type": "py",
      "functions": [
        "get_models"
      ],
      "imports": [
        "import os",
        "import json",
        "import asyncio",
        "import httpx",
        "from dotenv import load_dotenv"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/openrouter_models.json": {
      "size": 714700,
      "lines": 16504,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/find_model_ids.py": {
      "size": 905,
      "lines": 38,
      "type": "py",
      "functions": [
        "find_ids"
      ],
      "imports": [
        "import json"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/commissioning_phase6_verification.py": {
      "size": 5048,
      "lines": 134,
      "type": "py",
      "functions": [
        "hit_endpoint",
        "stress_test_endpoint",
        "worker",
        "generate_report"
      ],
      "imports": [
        "import asyncio",
        "import httpx",
        "import time",
        "import json"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/ultimate_ai_consensus.py": {
      "size": 6167,
      "lines": 143,
      "type": "py",
      "functions": [
        "read_report",
        "synthesize_all_reports",
        "query_ultimate_panel",
        "generate_final_report"
      ],
      "imports": [
        "import os",
        "import json",
        "import asyncio",
        "import httpx",
        "from dotenv import load_dotenv"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/ultimate_all_ai_consensus.py": {
      "size": 5804,
      "lines": 155,
      "type": "py",
      "functions": [
        "get_all_top_models",
        "query_model",
        "run_complete_consensus",
        "worker"
      ],
      "imports": [
        "import os",
        "import json",
        "import asyncio",
        "import httpx",
        "from dotenv import load_dotenv"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/restore_actual_vault.py": {
      "size": 4857,
      "lines": 137,
      "type": "py",
      "functions": [
        "create_vault_system",
        "verify_vault_connectivity"
      ],
      "imports": [
        "import os",
        "import json",
        "import hashlib",
        "from pathlib import Path"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/corrected_ai_consensus_with_real_vault.py": {
      "size": 5879,
      "lines": 161,
      "type": "py",
      "functions": [
        "load_real_vault_data",
        "query_model",
        "run_corrected_consensus"
      ],
      "imports": [
        "import os",
        "import json",
        "import asyncio",
        "import httpx",
        "from dotenv import load_dotenv"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/COMPLETE_FORENSIC_DISCOVERY.py": {
      "size": 15975,
      "lines": 363,
      "type": "py",
      "functions": [
        "__init__",
        "discover_everything",
        "discover_file_system",
        "discover_processes",
        "discover_network",
        "discover_databases",
        "discover_trading_systems",
        "discover_ai_systems",
        "discover_configurations",
        "discover_security_components",
        "discover_docker_systems",
        "discover_system_metrics",
        "generate_discovery_report"
      ],
      "imports": [
        "import os",
        "import json",
        "import subprocess",
        "import sqlite3",
        "import glob",
        "import hashlib",
        "import time",
        "from datetime import datetime",
        "from pathlib import Path",
        "import psutil"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/COMPLETE_FORENSIC_DISCOVERY_REPORT.json": {
      "size": 1957677,
      "lines": 25789,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/gap_analysis.py": {
      "size": 6454,
      "lines": 144,
      "type": "py",
      "functions": [
        "run_gap_analysis",
        "find_port_for_pid",
        "generate_report"
      ],
      "imports": [
        "import json",
        "import os"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/COMPLETE_SYSTEM_INTEGRATION.py": {
      "size": 8284,
      "lines": 199,
      "type": "py",
      "functions": [
        "integrate_all_systems",
        "create_unified_config",
        "generate_integration_report"
      ],
      "imports": [
        "import os",
        "import shutil",
        "import json",
        "from datetime import datetime"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/native_production_system.py": {
      "size": 10022,
      "lines": 268,
      "type": "py",
      "functions": [
        "__init__",
        "start_all_services",
        "start_okx_service",
        "okx_health",
        "okx_status",
        "okx_balance",
        "start_ai_service",
        "ai_health",
        "ai_status",
        "ai_consensus",
        "dashboard",
        "system_status",
        "health"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import threading",
        "import subprocess",
        "from datetime import datetime",
        "from flask import Flask, jsonify, request, render_template_string",
        "import requests",
        "import logging",
        "from flask import Flask",
        "from flask import Flask"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/ULTIMATE_AI_PORTFOLIO_MANAGER.py": {
      "size": 35080,
      "lines": 867,
      "type": "py",
      "functions": [
        "__init__",
        "_initialize_portfolio_database",
        "get_ai_analysis",
        "_store_ai_analysis",
        "calculate_portfolio_metrics",
        "_get_portfolio_returns",
        "_calculate_max_drawdown",
        "optimize_portfolio",
        "get_market_opportunities",
        "_setup_routes",
        "dashboard",
        "get_portfolio",
        "optimize",
        "opportunities",
        "risk_analysis",
        "rebalance",
        "run_ai_portfolio_manager",
        "_continuous_ai_analysis",
        "_store_portfolio_snapshot",
        "main"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import requests",
        "import numpy as np",
        "import pandas as pd",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Any, Optional, Tuple",
        "import logging",
        "import sqlite3",
        "import asyncio",
        "import aiohttp",
        "from concurrent.futures import ThreadPoolExecutor, as_completed",
        "import threading",
        "from dataclasses import dataclass, asdict",
        "from flask import Flask, jsonify, request, render_template_string",
        "import ccxt",
        "import yfinance as yf",
        "from scipy.optimize import minimize",
        "import warnings"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/main_dashboard_simple.py": {
      "size": 0,
      "lines": 1,
      "type": "py",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/COMPLETE_ULTIMATE_DASHBOARD.py": {
      "size": 30552,
      "lines": 846,
      "type": "py",
      "functions": [
        "__init__",
        "_initialize_database",
        "get_real_time_data",
        "log_action",
        "dashboard",
        "execute_action",
        "health",
        "api_status"
      ],
      "imports": [
        "from flask import Flask, render_template_string, jsonify, request",
        "import json",
        "import requests",
        "from datetime import datetime, timedelta",
        "import threading",
        "import time",
        "import os",
        "import sqlite3",
        "import logging"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/COMPLETE_STREAMLIT_PORTFOLIO.py": {
      "size": 13364,
      "lines": 439,
      "type": "py",
      "functions": [
        "__init__",
        "initialize_database",
        "get_portfolio_data",
        "get_ai_analysis",
        "get_performance_data",
        "get_portfolio_manager"
      ],
      "imports": [
        "import streamlit as st",
        "import pandas as pd",
        "import plotly.graph_objects as go",
        "import plotly.express as px",
        "import numpy as np",
        "from datetime import datetime, timedelta",
        "import requests",
        "import json",
        "import sqlite3",
        "import time"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/UNIFIED_SYSTEM_CONFIG.json": {
      "size": 1332,
      "lines": 44,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/ULTIMATE_AI_VALIDATION.py": {
      "size": 7216,
      "lines": 179,
      "type": "py",
      "functions": [
        "get_api_key",
        "run_ultimate_validation",
        "create_master_prompt",
        "query_ai_model",
        "generate_validation_report"
      ],
      "imports": [
        "import os",
        "import json",
        "import httpx",
        "from datetime import datetime"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/FORENSIC_SUCCESS_EXTRACTION.py": {
      "size": 8737,
      "lines": 202,
      "type": "py",
      "functions": [
        "extract_all_successes",
        "extract_from_current_systems",
        "extract_from_uploads",
        "extract_from_sandbox",
        "extract_description",
        "generate_extraction_report"
      ],
      "imports": [
        "from the last 7 days to create the definitive system.",
        "import os",
        "import json",
        "import re",
        "from datetime import datetime, timedelta",
        "from pathlib import Path"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/SUCCESS_COMPONENTS.json": {
      "size": 14257,
      "lines": 392,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/ULTIMATE_SYSTEM_COMPILER.py": {
      "size": 10717,
      "lines": 264,
      "type": "py",
      "functions": [
        "compile_ultimate_system",
        "create_master_configuration",
        "create_startup_script",
        "generate_compilation_report"
      ],
      "imports": [
        "import os",
        "import json",
        "import shutil",
        "from datetime import datetime"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/FINAL_OPENROUTER_CONSENSUS.py": {
      "size": 9959,
      "lines": 218,
      "type": "py",
      "functions": [
        "run_final_consensus",
        "create_definitive_prompt",
        "query_ai_model",
        "generate_consensus_report"
      ],
      "imports": [
        "import os",
        "import json",
        "import httpx",
        "from datetime import datetime"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/CURRENT_CHAT_EXTRACTION.py": {
      "size": 14053,
      "lines": 310,
      "type": "py",
      "functions": [
        "extract_current_chat_session",
        "create_chat_session_summary",
        "generate_extraction_report"
      ],
      "imports": [
        "import os",
        "import json",
        "import shutil",
        "from datetime import datetime",
        "from pathlib import Path"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/ULTIMATE_OPENROUTER_INTEGRATION.py": {
      "size": 18903,
      "lines": 519,
      "type": "py",
      "functions": [
        "__init__",
        "build_complete_system_context",
        "discover_trading_systems",
        "analyze_code_files",
        "extract_functions",
        "extract_imports",
        "extract_configurations",
        "map_ngrok_endpoints",
        "catalog_ai_capabilities",
        "extract_financial_data",
        "document_security_features",
        "query_ai_model",
        "get_ai_consensus",
        "create_integration_service",
        "handle_consensus",
        "handle_system_status",
        "handle_ai_models",
        "create_startup_script",
        "generate_integration_report",
        "main"
      ],
      "imports": [
        "import os",
        "import json",
        "import asyncio",
        "import aiohttp",
        "import subprocess",
        "from datetime import datetime",
        "from pathlib import Path",
        "import asyncio",
        "from aiohttp import web",
        "import json",
        "from ULTIMATE_OPENROUTER_INTEGRATION import UltimateOpenRouterIntegration"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/SYSTEM_CONTEXT.json": {
      "size": 145169,
      "lines": 4567,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/DEPLOYMENT_SUMMARY_20250930_121646.json": {
      "size": 2827,
      "lines": 97,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/ULTIMATE_TRANSACTION_CAPTURE_SYSTEM.py": {
      "size": 38906,
      "lines": 946,
      "type": "py",
      "functions": [
        "__init__",
        "_initialize_database",
        "_initialize_exchanges",
        "get_free_ai_consensus",
        "get_premium_ai_consensus",
        "_query_openrouter_model",
        "capture_all_transactions",
        "_capture_exchange_transactions",
        "_process_transaction",
        "_store_transaction",
        "_queue_for_ai_validation",
        "_continuous_ai_validation",
        "_update_transaction_validation",
        "generate_compliance_report",
        "_extract_recommendations",
        "_store_compliance_report",
        "get_system_status",
        "main"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import ccxt",
        "import sqlite3",
        "import hashlib",
        "import threading",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Any, Optional",
        "from dataclasses import dataclass, asdict",
        "import requests",
        "import pandas as pd",
        "from concurrent.futures import ThreadPoolExecutor, as_completed",
        "import logging"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/AIComplianceSystemRequiresContainerDeploymentforProduction_extracted/ULTIMATE_AI_PORTFOLIO_MANAGER.py": {
      "size": 35080,
      "lines": 867,
      "type": "py",
      "functions": [
        "__init__",
        "_initialize_portfolio_database",
        "get_ai_analysis",
        "_store_ai_analysis",
        "calculate_portfolio_metrics",
        "_get_portfolio_returns",
        "_calculate_max_drawdown",
        "optimize_portfolio",
        "get_market_opportunities",
        "_setup_routes",
        "dashboard",
        "get_portfolio",
        "optimize",
        "opportunities",
        "risk_analysis",
        "rebalance",
        "run_ai_portfolio_manager",
        "_continuous_ai_analysis",
        "_store_portfolio_snapshot",
        "main"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import requests",
        "import numpy as np",
        "import pandas as pd",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Any, Optional, Tuple",
        "import logging",
        "import sqlite3",
        "import asyncio",
        "import aiohttp",
        "from concurrent.futures import ThreadPoolExecutor, as_completed",
        "import threading",
        "from dataclasses import dataclass, asdict",
        "from flask import Flask, jsonify, request, render_template_string",
        "import ccxt",
        "import yfinance as yf",
        "from scipy.optimize import minimize",
        "import warnings"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/AIComplianceSystemRequiresContainerDeploymentforProduction_extracted/DEPLOYMENT_SUMMARY_20250930_121646.json": {
      "size": 2827,
      "lines": 97,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/AIComplianceSystemRequiresContainerDeploymentforProduction_extracted/ULTIMATE_COMPREHENSIVE_SYSTEM_DEPLOYER.py": {
      "size": 43556,
      "lines": 1246,
      "type": "py",
      "functions": [
        "__init__",
        "deploy_dashboard_system",
        "deploy_ato_tax_system",
        "deploy_gst_compliance_system",
        "deploy_telegram_control_system",
        "deploy_fees_analyzer_system",
        "deploy_monitoring_stack",
        "_create_dashboard_services",
        "dashboard",
        "get_chart",
        "portfolio",
        "portfolio_summary",
        "_create_ato_tax_system",
        "__init__",
        "calculate_capital_gains",
        "generate_tax_report",
        "tax_dashboard",
        "get_tax_report",
        "calculate_capital_gains",
        "_create_gst_compliance_system",
        "__init__",
        "check_registration_requirement",
        "calculate_gst_liability",
        "gst_dashboard",
        "gst_status",
        "_create_telegram_control_system",
        "__init__",
        "send_message",
        "get_system_status",
        "telegram_dashboard",
        "get_status",
        "send_alert",
        "_create_fees_analyzer_system",
        "__init__",
        "calculate_monthly_fees",
        "optimize_exchange_selection",
        "fees_dashboard",
        "fees_analysis",
        "_create_monitoring_stack",
        "start_all_services",
        "generate_deployment_summary",
        "main"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import requests",
        "import subprocess",
        "import threading",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Any, Optional",
        "from concurrent.futures import ThreadPoolExecutor, as_completed",
        "import logging",
        "import sqlite3",
        "import hashlib",
        "from dataclasses import dataclass, asdict",
        "import asyncio",
        "import aiohttp",
        "import pandas as pd",
        "import numpy as np",
        "import flask",
        "from flask import Flask, render_template, jsonify",
        "import mplfinance as mpf",
        "import pandas as pd",
        "import yfinance as yf",
        "from datetime import datetime, timedelta",
        "import io",
        "import base64",
        "import flask",
        "from flask import Flask, jsonify",
        "import ccxt",
        "import pandas as pd",
        "from datetime import datetime",
        "import flask",
        "from flask import Flask, jsonify, request",
        "import pandas as pd",
        "from datetime import datetime, timedelta",
        "import json",
        "import flask",
        "from flask import Flask, jsonify",
        "from datetime import datetime, timedelta",
        "import flask",
        "from flask import Flask, jsonify",
        "import requests",
        "from datetime import datetime",
        "import flask",
        "from flask import Flask, jsonify",
        "from datetime import datetime, timedelta"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/AIComplianceSystemRequiresContainerDeploymentforProduction_extracted/ULTIMATE_AI_DASHBOARD_DISCOVERY_SYSTEM.py": {
      "size": 39820,
      "lines": 894,
      "type": "py",
      "functions": [
        "__init__",
        "_initialize_discovery_database",
        "discover_github_dashboards",
        "get_ultimate_ai_analysis",
        "_query_openrouter_model",
        "store_dashboard_candidate",
        "get_top_dashboard_recommendations",
        "create_ultimate_dashboard_integration_plan",
        "execute_phase_1_with_ai_consensus",
        "main"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import requests",
        "import subprocess",
        "import threading",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Any, Optional",
        "from concurrent.futures import ThreadPoolExecutor, as_completed",
        "import logging",
        "import sqlite3",
        "import hashlib",
        "from dataclasses import dataclass, asdict",
        "import re"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/AIComplianceSystemRequiresContainerDeploymentforProduction_extracted/SYSTEM_INTEGRATION_PUSHER.py": {
      "size": 17787,
      "lines": 503,
      "type": "py",
      "functions": [
        "__init__",
        "check_system_status",
        "unified_dashboard",
        "api_system_status",
        "api_test_ai_consensus",
        "forensic_redirect",
        "system_status_page",
        "transaction_logs",
        "start_integration_server",
        "push_to_system"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import requests",
        "import subprocess",
        "from datetime import datetime",
        "from flask import Flask, jsonify, render_template_string, redirect",
        "import threading",
        "import logging"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/AIComplianceSystemRequiresContainerDeploymentforProduction_extracted/ULTIMATE_TRANSACTION_CAPTURE_SYSTEM.py": {
      "size": 38906,
      "lines": 946,
      "type": "py",
      "functions": [
        "__init__",
        "_initialize_database",
        "_initialize_exchanges",
        "get_free_ai_consensus",
        "get_premium_ai_consensus",
        "_query_openrouter_model",
        "capture_all_transactions",
        "_capture_exchange_transactions",
        "_process_transaction",
        "_store_transaction",
        "_queue_for_ai_validation",
        "_continuous_ai_validation",
        "_update_transaction_validation",
        "generate_compliance_report",
        "_extract_recommendations",
        "_store_compliance_report",
        "get_system_status",
        "main"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import ccxt",
        "import sqlite3",
        "import hashlib",
        "import threading",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Any, Optional",
        "from dataclasses import dataclass, asdict",
        "import requests",
        "import pandas as pd",
        "from concurrent.futures import ThreadPoolExecutor, as_completed",
        "import logging"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/AIComplianceSystemRequiresContainerDeploymentforProduction_extracted/PHASE_1_FOUNDATION_VERIFICATION.py": {
      "size": 21149,
      "lines": 476,
      "type": "py",
      "functions": [
        "__init__",
        "initialize_ai_commissioner",
        "verify_container_infrastructure",
        "verify_security_infrastructure",
        "verify_monitoring_systems",
        "generate_phase1_report",
        "execute_phase1",
        "main"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import subprocess",
        "from datetime import datetime",
        "from AI_FORENSIC_COMPLIANCE_COMMISSIONER import AIForensicComplianceCommissioner",
        "import requests"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/AIComplianceSystemRequiresContainerDeploymentforProduction_extracted/ngrok_forensic_integration.py": {
      "size": 29810,
      "lines": 733,
      "type": "py",
      "functions": [
        "initialize_commissioner",
        "forensic_dashboard",
        "api_system_health",
        "api_ai_status",
        "api_exchange_status",
        "api_vault_status",
        "api_compliance_events",
        "api_live_logs",
        "api_request_consensus",
        "api_generate_report",
        "api_emergency_stop",
        "forensic_status",
        "start_ngrok_integration"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import sqlite3",
        "from datetime import datetime, timedelta",
        "from flask import Flask, jsonify, render_template_string, request",
        "from AI_FORENSIC_COMPLIANCE_COMMISSIONER import AIForensicComplianceCommissioner",
        "import threading",
        "import logging"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/AIComplianceSystemRequiresContainerDeploymentforProduction_extracted/AI_FORENSIC_COMPLIANCE_COMMISSIONER.py": {
      "size": 56447,
      "lines": 1389,
      "type": "py",
      "functions": [
        "__init__",
        "_load_openrouter_keys",
        "_initialize_best_ai_models",
        "_initialize_forensic_database",
        "get_ai_consensus",
        "_query_ai_model",
        "_get_specialized_prompt",
        "_analyze_consensus",
        "start_continuous_monitoring",
        "_monitor_system_health",
        "_monitor_exchange_connections",
        "_monitor_ai_models",
        "_monitor_vault_integrity",
        "_monitor_file_integrity",
        "_perform_periodic_ai_analysis",
        "_attempt_automatic_remediation",
        "_remediate_system_health",
        "_remediate_exchange_connections",
        "_remediate_vault_integrity",
        "_get_system_health",
        "_check_exchange_connections",
        "_check_vault_integrity",
        "_calculate_file_hash",
        "_count_recent_errors",
        "_get_current_system_status",
        "_log_compliance_event",
        "_store_system_health",
        "_store_ai_consensus",
        "generate_forensic_report",
        "_analyze_health_data",
        "_analyze_consensus_data",
        "_generate_recommendations",
        "stop_monitoring",
        "main"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import logging",
        "import hashlib",
        "import threading",
        "import subprocess",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Any, Optional, Tuple",
        "from dataclasses import dataclass, asdict",
        "from pathlib import Path",
        "import requests",
        "import psutil",
        "import sqlite3",
        "from concurrent.futures import ThreadPoolExecutor, as_completed",
        "import re"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/AIComplianceSystemRequiresContainerDeploymentforProduction_extracted/native_production_system.py": {
      "size": 10022,
      "lines": 268,
      "type": "py",
      "functions": [
        "__init__",
        "start_all_services",
        "start_okx_service",
        "okx_health",
        "okx_status",
        "okx_balance",
        "start_ai_service",
        "ai_health",
        "ai_status",
        "ai_consensus",
        "dashboard",
        "system_status",
        "health"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import threading",
        "import subprocess",
        "from datetime import datetime",
        "from flask import Flask, jsonify, request, render_template_string",
        "import requests",
        "import logging",
        "from flask import Flask",
        "from flask import Flask"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/FixNgrokConnectionandBuildPositionIssue(1)_extracted/ULTIMATE_COMPLIANCE_CONSENSUS_SYSTEM.py": {
      "size": 26097,
      "lines": 594,
      "type": "py",
      "functions": [
        "__init__",
        "get_system_inventory",
        "query_openrouter_model",
        "get_ai_consensus",
        "define_compliance_checks",
        "run_comprehensive_compliance_check",
        "generate_compliance_summary",
        "save_compliance_report",
        "main"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import asyncio",
        "import aiohttp",
        "import requests",
        "from datetime import datetime",
        "from typing import Dict, List, Optional, Any",
        "from dataclasses import dataclass, asdict"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/FixNgrokConnectionandBuildPositionIssue(1)_extracted/PRODUCTION_READY_CONTAINER_BUILDER.py": {
      "size": 34066,
      "lines": 982,
      "type": "py",
      "functions": [
        "__init__",
        "define_container_specifications",
        "create_container_directory_structure",
        "generate_dockerfile",
        "generate_docker_compose",
        "build_all_containers",
        "generate_requirements_files",
        "generate_application_files",
        "health_check",
        "get_balance",
        "health_check",
        "ai_consensus",
        "health_check",
        "ingest_event",
        "validate_production_readiness",
        "generate_deployment_commands",
        "save_build_report",
        "run_production_build",
        "generate_build_summary",
        "main"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import subprocess",
        "import requests",
        "from datetime import datetime",
        "from typing import Dict, List, Optional, Any",
        "from dataclasses import dataclass, asdict",
        "import os",
        "from fastapi import FastAPI",
        "from uvicorn import run",
        "import os",
        "from fastapi import FastAPI",
        "from uvicorn import run",
        "from flask import Flask, request, jsonify",
        "import os"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/FixNgrokConnectionandBuildPositionIssue(1)_extracted/production_container_build_report_20250930_101233.json": {
      "size": 11729,
      "lines": 374,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/FixNgrokConnectionandBuildPositionIssue(1)_extracted/ULTIMATE_OPENROUTER_AI_CONSENSUS_SYSTEM.py": {
      "size": 31660,
      "lines": 773,
      "type": "py",
      "functions": [
        "__init__",
        "init_session",
        "close_session",
        "query_ai_model",
        "extract_confidence_score",
        "extract_compliance_score",
        "extract_recommendations",
        "get_system_inventory",
        "analyze_component_with_ai_consensus",
        "calculate_consensus_score",
        "analyze_all_system_components",
        "generate_final_recommendations",
        "calculate_overall_system_score",
        "run_ultimate_ai_consensus",
        "generate_summary_report",
        "save_detailed_report",
        "main"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import asyncio",
        "import aiohttp",
        "import subprocess",
        "import requests",
        "from datetime import datetime",
        "from typing import Dict, List, Optional, Any",
        "from dataclasses import dataclass, asdict",
        "import re",
        "import re",
        "import re",
        "import asyncio"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/FixNgrokConnectionandBuildPositionIssue(1)_extracted/comprehensive_compliance_verification.py": {
      "size": 18928,
      "lines": 455,
      "type": "py",
      "functions": [
        "__init__",
        "check_auto_manager_compliance",
        "check_ngrok_tunnel_compliance",
        "check_container_compliance",
        "check_security_compliance",
        "check_performance_compliance",
        "run_integration_tests",
        "generate_compliance_report",
        "save_report",
        "run_full_compliance_check",
        "main"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import subprocess",
        "import requests",
        "from datetime import datetime",
        "from typing import Dict, List, Optional",
        "import psutil"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/FixNgrokConnectionandBuildPositionIssue(1)_extracted/manus_verification_enhanced.py": {
      "size": 13555,
      "lines": 345,
      "type": "py",
      "functions": [
        "__init__",
        "check_auto_manager_status",
        "get_tunnel_info",
        "test_health_endpoint",
        "test_command_execution",
        "test_system_integration",
        "generate_manus_commands",
        "run_full_verification",
        "main"
      ],
      "imports": [
        "import requests",
        "import json",
        "import time",
        "import sys",
        "import subprocess",
        "import os",
        "from datetime import datetime",
        "from typing import Dict, List, Optional"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/FixNgrokConnectionandBuildPositionIssue(1)_extracted/deploy_updated_ngrok_container.sh": {
      "size": 11931,
      "lines": 503,
      "type": "sh",
      "functions": [
        "monitor_tunnels"
      ],
      "imports": [
        "import time",
        "import requests",
        "import logging"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/FixNgrokConnectionandBuildPositionIssue(1)_extracted/docker-compose-updated.yml": {
      "size": 4532,
      "lines": 161,
      "type": "yml",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/FixNgrokConnectionandBuildPositionIssue(1)_extracted/tunnel_manager.py": {
      "size": 3657,
      "lines": 101,
      "type": "py",
      "functions": [
        "__init__",
        "_load_config",
        "start_all_tunnels",
        "_get_tunnel_urls",
        "health_check",
        "get_traffic_inspection",
        "stop_all_tunnels"
      ],
      "imports": [
        "import os",
        "import json",
        "import asyncio",
        "import logging",
        "import subprocess",
        "from datetime import datetime",
        "from typing import Dict, List, Optional",
        "import aiohttp",
        "import yaml"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/FixNgrokConnectionandBuildPositionIssue(1)_extracted/manus_verification.py": {
      "size": 5882,
      "lines": 150,
      "type": "py",
      "functions": [
        "verify_ngrok_for_manus",
        "print_manus_commands"
      ],
      "imports": [
        "import requests",
        "import json",
        "import time",
        "import sys"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/FixNgrokConnectionandBuildPositionIssue(1)_extracted/docker-compose.yml": {
      "size": 1008,
      "lines": 38,
      "type": "yml",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/FixNgrokConnectionandBuildPositionIssue(1)_extracted/ngrok_config.yml": {
      "size": 950,
      "lines": 38,
      "type": "yml",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/FixNgrokConnectionandBuildPositionIssue(1)_extracted/safe_tunnel_policies.py": {
      "size": 2196,
      "lines": 72,
      "type": "py",
      "functions": [
        "__init__",
        "is_spot_request",
        "is_perp_locked",
        "filter_command"
      ],
      "imports": [
        "import re",
        "from typing import Dict, List"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/FixNgrokConnectionandBuildPositionIssue(1)_extracted/start_ngrok.sh": {
      "size": 479,
      "lines": 25,
      "type": "sh",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/FixNgrokConnectionandBuildPositionIssue(1)_extracted/auto_ngrok_manager.py": {
      "size": 9481,
      "lines": 251,
      "type": "py",
      "functions": [
        "__init__",
        "setup_logging",
        "signal_handler",
        "check_process_running",
        "kill_process_by_name",
        "check_port_available",
        "free_port",
        "start_ingest_gateway",
        "check_local_gateway",
        "check_ngrok_tunnel",
        "restart_ingest_gateway",
        "get_system_status",
        "monitor_and_restart",
        "main"
      ],
      "imports": [
        "import os",
        "import time",
        "import subprocess",
        "import requests",
        "import psutil",
        "import logging",
        "import signal",
        "import sys",
        "from datetime import datetime",
        "from typing import Dict, List, Optional",
        "import socket"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/uploaded_files/FixNgrokConnectionandBuildPositionIssue(1)_extracted/setup_auto_ngrok.sh": {
      "size": 7070,
      "lines": 261,
      "type": "sh",
      "functions": [
        "signal_handler",
        "health_check",
        "ingest_event"
      ],
      "imports": [
        "import os",
        "import json",
        "import subprocess",
        "import logging",
        "from datetime import datetime",
        "from flask import Flask, request, jsonify",
        "import signal",
        "import sys"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/current_systems/AI_FORENSIC_COMPLIANCE_COMMISSIONER.py": {
      "size": 56447,
      "lines": 1389,
      "type": "py",
      "functions": [
        "__init__",
        "_load_openrouter_keys",
        "_initialize_best_ai_models",
        "_initialize_forensic_database",
        "get_ai_consensus",
        "_query_ai_model",
        "_get_specialized_prompt",
        "_analyze_consensus",
        "start_continuous_monitoring",
        "_monitor_system_health",
        "_monitor_exchange_connections",
        "_monitor_ai_models",
        "_monitor_vault_integrity",
        "_monitor_file_integrity",
        "_perform_periodic_ai_analysis",
        "_attempt_automatic_remediation",
        "_remediate_system_health",
        "_remediate_exchange_connections",
        "_remediate_vault_integrity",
        "_get_system_health",
        "_check_exchange_connections",
        "_check_vault_integrity",
        "_calculate_file_hash",
        "_count_recent_errors",
        "_get_current_system_status",
        "_log_compliance_event",
        "_store_system_health",
        "_store_ai_consensus",
        "generate_forensic_report",
        "_analyze_health_data",
        "_analyze_consensus_data",
        "_generate_recommendations",
        "stop_monitoring",
        "main"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import logging",
        "import hashlib",
        "import threading",
        "import subprocess",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Any, Optional, Tuple",
        "from dataclasses import dataclass, asdict",
        "from pathlib import Path",
        "import requests",
        "import psutil",
        "import sqlite3",
        "from concurrent.futures import ThreadPoolExecutor, as_completed",
        "import re"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/current_systems/COMPLETE_STREAMLIT_PORTFOLIO.py": {
      "size": 13364,
      "lines": 439,
      "type": "py",
      "functions": [
        "__init__",
        "initialize_database",
        "get_portfolio_data",
        "get_ai_analysis",
        "get_performance_data",
        "get_portfolio_manager"
      ],
      "imports": [
        "import streamlit as st",
        "import pandas as pd",
        "import plotly.graph_objects as go",
        "import plotly.express as px",
        "import numpy as np",
        "from datetime import datetime, timedelta",
        "import requests",
        "import json",
        "import sqlite3",
        "import time"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/current_systems/COMPLETE_TELEGRAM_INTEGRATION.py": {
      "size": 20074,
      "lines": 508,
      "type": "py",
      "functions": [
        "__init__",
        "initialize_database",
        "_setup_commands",
        "get_system_status",
        "get_portfolio_summary",
        "get_pnl_report",
        "get_balance_report",
        "get_ai_analysis",
        "get_tax_summary",
        "configure_alerts",
        "emergency_stop",
        "show_help",
        "send_message",
        "process_command",
        "start_monitoring"
      ],
      "imports": [
        "import asyncio",
        "import json",
        "import logging",
        "import sqlite3",
        "from datetime import datetime, timedelta",
        "import requests",
        "import os",
        "from typing import Dict, List, Optional"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/current_systems/COMPLETE_ULTIMATE_DASHBOARD.py": {
      "size": 30552,
      "lines": 846,
      "type": "py",
      "functions": [
        "__init__",
        "_initialize_database",
        "get_real_time_data",
        "log_action",
        "dashboard",
        "execute_action",
        "health",
        "api_status"
      ],
      "imports": [
        "from flask import Flask, render_template_string, jsonify, request",
        "import json",
        "import requests",
        "from datetime import datetime, timedelta",
        "import threading",
        "import time",
        "import os",
        "import sqlite3",
        "import logging"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/current_systems/DEPLOYMENT_SUMMARY_20250930_121646.json": {
      "size": 2827,
      "lines": 97,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/current_systems/EXCHANGE_API_CREDENTIAL_VALIDATOR.py": {
      "size": 58084,
      "lines": 1376,
      "type": "py",
      "functions": [
        "__init__",
        "initialize_validation_database",
        "load_exchange_credentials",
        "load_credentials_from_environment",
        "load_credentials_from_files",
        "generate_demo_credentials",
        "validate_all_exchanges",
        "validate_single_exchange",
        "test_basic_connection",
        "test_authentication",
        "test_market_data_access",
        "test_account_information",
        "test_balance_retrieval",
        "test_orderbook_access",
        "test_rate_limiting",
        "test_error_handling",
        "create_exchange_instance",
        "calculate_performance_metrics",
        "assess_security_configuration",
        "generate_recommendations",
        "determine_overall_status",
        "create_error_report",
        "store_validation_report",
        "generate_validation_summary",
        "main"
      ],
      "imports": [
        "import asyncio",
        "import aiohttp",
        "import ccxt",
        "import json",
        "import sqlite3",
        "import logging",
        "import time",
        "import hashlib",
        "import hmac",
        "import base64",
        "import requests",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Optional, Any, Tuple",
        "from dataclasses import dataclass",
        "from enum import Enum",
        "import pandas as pd",
        "import os"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/current_systems/NGROK_COMPLETE_SETUP.py": {
      "size": 15198,
      "lines": 429,
      "type": "py",
      "functions": [
        "__init__",
        "check_existing_ngrok",
        "verify_services",
        "create_ngrok_config",
        "setup_public_access",
        "display_access_urls",
        "test_public_access",
        "create_access_dashboard",
        "generate_access_report",
        "main"
      ],
      "imports": [
        "import subprocess",
        "import time",
        "import json",
        "import requests",
        "import os",
        "from datetime import datetime"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/current_systems/PHASE_1_FOUNDATION_VERIFICATION.py": {
      "size": 21149,
      "lines": 476,
      "type": "py",
      "functions": [
        "__init__",
        "initialize_ai_commissioner",
        "verify_container_infrastructure",
        "verify_security_infrastructure",
        "verify_monitoring_systems",
        "generate_phase1_report",
        "execute_phase1",
        "main"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import subprocess",
        "from datetime import datetime",
        "from AI_FORENSIC_COMPLIANCE_COMMISSIONER import AIForensicComplianceCommissioner",
        "import requests"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/current_systems/PRODUCTION_EXCHANGE_CONFIGURATION.py": {
      "size": 32687,
      "lines": 766,
      "type": "py",
      "functions": [
        "__init__",
        "initialize_production_database",
        "load_production_configuration",
        "load_production_credentials",
        "load_configuration_files",
        "create_demo_configuration",
        "create_exchange_config",
        "initialize_exchange_connections",
        "create_production_exchange_instance",
        "test_all_connections",
        "test_single_connection",
        "get_portfolio_balances",
        "get_demo_balances",
        "get_market_data",
        "get_demo_market_data",
        "get_connection_summary",
        "store_configuration",
        "main"
      ],
      "imports": [
        "import asyncio",
        "import ccxt",
        "import json",
        "import sqlite3",
        "import logging",
        "import time",
        "import os",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Optional, Any, Tuple",
        "from dataclasses import dataclass",
        "from enum import Enum",
        "import pandas as pd",
        "import random"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/current_systems/SYSTEM_INTEGRATION_PUSHER.py": {
      "size": 17787,
      "lines": 503,
      "type": "py",
      "functions": [
        "__init__",
        "check_system_status",
        "unified_dashboard",
        "api_system_status",
        "api_test_ai_consensus",
        "forensic_redirect",
        "system_status_page",
        "transaction_logs",
        "start_integration_server",
        "push_to_system"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import requests",
        "import subprocess",
        "from datetime import datetime",
        "from flask import Flask, jsonify, render_template_string, redirect",
        "import threading",
        "import logging"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/current_systems/ULTIMATE_AI_CONSENSUS_COMMISSIONING.py": {
      "size": 43744,
      "lines": 979,
      "type": "py",
      "functions": [
        "__init__",
        "setup_ai_consensus_system",
        "setup_system_integration",
        "setup_risk_management",
        "initialize_commissioning_database",
        "get_ai_consensus_for_phase",
        "prepare_analysis_context",
        "get_phase_specific_requirements",
        "query_ai_model_for_commissioning",
        "parse_commissioning_ai_response",
        "calculate_commissioning_consensus",
        "create_emergency_consensus_result",
        "store_consensus_decision",
        "execute_phase_1_foundation_verification",
        "gather_comprehensive_system_status",
        "execute_emergency_protocols",
        "emergency_immediate_stop",
        "emergency_gradual_reduction",
        "emergency_position_hedge",
        "emergency_liquidity_preservation",
        "emergency_system_isolation",
        "log_risk_event",
        "run_complete_commissioning_sequence",
        "main"
      ],
      "imports": [
        "import asyncio",
        "import aiohttp",
        "import json",
        "import sqlite3",
        "import logging",
        "import threading",
        "import time",
        "import requests",
        "import os",
        "import sys",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Optional, Any",
        "from dataclasses import dataclass",
        "from enum import Enum",
        "import pandas as pd",
        "import numpy as np",
        "import re"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/current_systems/ULTIMATE_AI_DASHBOARD_DISCOVERY_SYSTEM.py": {
      "size": 39820,
      "lines": 894,
      "type": "py",
      "functions": [
        "__init__",
        "_initialize_discovery_database",
        "discover_github_dashboards",
        "get_ultimate_ai_analysis",
        "_query_openrouter_model",
        "store_dashboard_candidate",
        "get_top_dashboard_recommendations",
        "create_ultimate_dashboard_integration_plan",
        "execute_phase_1_with_ai_consensus",
        "main"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import requests",
        "import subprocess",
        "import threading",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Any, Optional",
        "from concurrent.futures import ThreadPoolExecutor, as_completed",
        "import logging",
        "import sqlite3",
        "import hashlib",
        "from dataclasses import dataclass, asdict",
        "import re"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/current_systems/ULTIMATE_AI_PORTFOLIO_MANAGER.py": {
      "size": 35080,
      "lines": 867,
      "type": "py",
      "functions": [
        "__init__",
        "_initialize_portfolio_database",
        "get_ai_analysis",
        "_store_ai_analysis",
        "calculate_portfolio_metrics",
        "_get_portfolio_returns",
        "_calculate_max_drawdown",
        "optimize_portfolio",
        "get_market_opportunities",
        "_setup_routes",
        "dashboard",
        "get_portfolio",
        "optimize",
        "opportunities",
        "risk_analysis",
        "rebalance",
        "run_ai_portfolio_manager",
        "_continuous_ai_analysis",
        "_store_portfolio_snapshot",
        "main"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import requests",
        "import numpy as np",
        "import pandas as pd",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Any, Optional, Tuple",
        "import logging",
        "import sqlite3",
        "import asyncio",
        "import aiohttp",
        "from concurrent.futures import ThreadPoolExecutor, as_completed",
        "import threading",
        "from dataclasses import dataclass, asdict",
        "from flask import Flask, jsonify, request, render_template_string",
        "import ccxt",
        "import yfinance as yf",
        "from scipy.optimize import minimize",
        "import warnings"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/current_systems/ULTIMATE_COMPREHENSIVE_DISCOVERY_SYSTEM.py": {
      "size": 44706,
      "lines": 1019,
      "type": "py",
      "functions": [
        "__init__",
        "initialize_discovery_database",
        "execute_comprehensive_discovery",
        "discover_all_files",
        "discover_exchange_systems",
        "discover_all_apis",
        "discover_environment_apis",
        "discover_configuration_apis",
        "discover_hardcoded_apis",
        "discover_active_services",
        "discover_databases",
        "discover_configurations",
        "discover_vault_data",
        "discover_notion_data",
        "test_all_openrouter_keys",
        "store_discovery_results",
        "generate_discovery_report",
        "main"
      ],
      "imports": [
        "import asyncio",
        "import aiohttp",
        "import ccxt",
        "import json",
        "import sqlite3",
        "import logging",
        "import time",
        "import os",
        "import hashlib",
        "import requests",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Optional, Any, Tuple",
        "from dataclasses import dataclass, asdict",
        "from enum import Enum",
        "import pandas as pd",
        "import subprocess"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/current_systems/ULTIMATE_COMPREHENSIVE_SYSTEM_DEPLOYER.py": {
      "size": 43556,
      "lines": 1246,
      "type": "py",
      "functions": [
        "__init__",
        "deploy_dashboard_system",
        "deploy_ato_tax_system",
        "deploy_gst_compliance_system",
        "deploy_telegram_control_system",
        "deploy_fees_analyzer_system",
        "deploy_monitoring_stack",
        "_create_dashboard_services",
        "dashboard",
        "get_chart",
        "portfolio",
        "portfolio_summary",
        "_create_ato_tax_system",
        "__init__",
        "calculate_capital_gains",
        "generate_tax_report",
        "tax_dashboard",
        "get_tax_report",
        "calculate_capital_gains",
        "_create_gst_compliance_system",
        "__init__",
        "check_registration_requirement",
        "calculate_gst_liability",
        "gst_dashboard",
        "gst_status",
        "_create_telegram_control_system",
        "__init__",
        "send_message",
        "get_system_status",
        "telegram_dashboard",
        "get_status",
        "send_alert",
        "_create_fees_analyzer_system",
        "__init__",
        "calculate_monthly_fees",
        "optimize_exchange_selection",
        "fees_dashboard",
        "fees_analysis",
        "_create_monitoring_stack",
        "start_all_services",
        "generate_deployment_summary",
        "main"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import requests",
        "import subprocess",
        "import threading",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Any, Optional",
        "from concurrent.futures import ThreadPoolExecutor, as_completed",
        "import logging",
        "import sqlite3",
        "import hashlib",
        "from dataclasses import dataclass, asdict",
        "import asyncio",
        "import aiohttp",
        "import pandas as pd",
        "import numpy as np",
        "import flask",
        "from flask import Flask, render_template, jsonify",
        "import mplfinance as mpf",
        "import pandas as pd",
        "import yfinance as yf",
        "from datetime import datetime, timedelta",
        "import io",
        "import base64",
        "import flask",
        "from flask import Flask, jsonify",
        "import ccxt",
        "import pandas as pd",
        "from datetime import datetime",
        "import flask",
        "from flask import Flask, jsonify, request",
        "import pandas as pd",
        "from datetime import datetime, timedelta",
        "import json",
        "import flask",
        "from flask import Flask, jsonify",
        "from datetime import datetime, timedelta",
        "import flask",
        "from flask import Flask, jsonify",
        "import requests",
        "from datetime import datetime",
        "import flask",
        "from flask import Flask, jsonify",
        "from datetime import datetime, timedelta"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/current_systems/ULTIMATE_DASHBOARD_CONTROL_SYSTEM.py": {
      "size": 46529,
      "lines": 1569,
      "type": "py",
      "functions": [
        "__init__",
        "_initialize_dashboard_database",
        "deploy_advanced_charting_service",
        "deploy_portfolio_control_service",
        "deploy_tax_reporting_service",
        "deploy_telegram_control_service",
        "deploy_main_dashboard",
        "color_status",
        "_run_streamlit_service",
        "deploy_all_services",
        "main"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import asyncio",
        "import threading",
        "import requests",
        "import pandas as pd",
        "import numpy as np",
        "import streamlit as st",
        "import plotly.graph_objects as go",
        "import plotly.express as px",
        "from plotly.subplots import make_subplots",
        "import mplfinance as mpf",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Any, Optional",
        "import logging",
        "import sqlite3",
        "import ccxt",
        "import yfinance as yf",
        "from flask import Flask, jsonify, request, render_template_string",
        "import websocket",
        "import json",
        "from concurrent.futures import ThreadPoolExecutor",
        "import subprocess",
        "import streamlit as st",
        "import mplfinance as mpf",
        "import pandas as pd",
        "import yfinance as yf",
        "import plotly.graph_objects as go",
        "from plotly.subplots import make_subplots",
        "import ccxt",
        "from datetime import datetime, timedelta",
        "import numpy as np",
        "import streamlit as st",
        "import pandas as pd",
        "import plotly.graph_objects as go",
        "import plotly.express as px",
        "from plotly.subplots import make_subplots",
        "import numpy as np",
        "from datetime import datetime, timedelta",
        "import requests",
        "import json",
        "import streamlit as st",
        "import pandas as pd",
        "import plotly.graph_objects as go",
        "import plotly.express as px",
        "from datetime import datetime, timedelta",
        "import numpy as np",
        "import streamlit as st",
        "import pandas as pd",
        "import plotly.graph_objects as go",
        "from datetime import datetime, timedelta",
        "import requests",
        "import json",
        "import streamlit as st",
        "import pandas as pd",
        "import plotly.graph_objects as go",
        "import plotly.express as px",
        "from plotly.subplots import make_subplots",
        "import numpy as np",
        "from datetime import datetime, timedelta",
        "import requests",
        "import json"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/current_systems/ULTIMATE_MULTI_SOURCE_API_SYSTEM.py": {
      "size": 47569,
      "lines": 1039,
      "type": "py",
      "functions": [
        "__init__",
        "setup_all_apis",
        "initialize_database",
        "fetch_multi_source_prices",
        "calculate_price_consensus",
        "store_multi_source_prices",
        "get_ai_consensus_analysis",
        "query_openrouter_model",
        "parse_ai_response",
        "extract_assessment",
        "extract_risk_score",
        "extract_confidence",
        "extract_recommendations",
        "extract_market_outlook",
        "calculate_ai_consensus",
        "store_ai_analysis",
        "format_portfolio_for_ai",
        "update_all_data",
        "calculate_portfolio_from_consensus",
        "start_background_updates",
        "update_loop",
        "get_system_status",
        "multi_source_dashboard",
        "api_multi_source_portfolio",
        "health"
      ],
      "imports": [
        "import asyncio",
        "import aiohttp",
        "import json",
        "import sqlite3",
        "import logging",
        "import threading",
        "import time",
        "import requests",
        "import os",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Optional, Any",
        "from pycoingecko import CoinGeckoAPI",
        "from flask import Flask, render_template_string, jsonify, request",
        "import pandas as pd",
        "import numpy as np",
        "from polygon import RESTClient as PolygonClient",
        "import re",
        "import re",
        "import re"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/current_systems/ULTIMATE_REAL_EXCHANGE_PORTFOLIO.py": {
      "size": 38235,
      "lines": 903,
      "type": "py",
      "functions": [
        "__init__",
        "initialize_database",
        "setup_exchanges",
        "setup_demo_exchanges",
        "fetch_all_coin_data",
        "fetch_exchange_balances",
        "generate_demo_balances",
        "calculate_portfolio_values",
        "get_coin_price",
        "store_portfolio_data",
        "get_ai_portfolio_analysis",
        "query_openrouter_consensus",
        "format_portfolio_for_ai",
        "store_ai_analysis",
        "update_portfolio_data",
        "start_background_updates",
        "update_loop",
        "get_portfolio_summary",
        "portfolio_dashboard",
        "api_portfolio",
        "health"
      ],
      "imports": [
        "import ccxt",
        "import asyncio",
        "import aiohttp",
        "import json",
        "import sqlite3",
        "import logging",
        "import threading",
        "import time",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Optional, Any",
        "from pycoingecko import CoinGeckoAPI",
        "import requests",
        "import os",
        "from flask import Flask, render_template_string, jsonify, request",
        "import pandas as pd",
        "import numpy as np"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/current_systems/ULTIMATE_TRANSACTION_CAPTURE_SYSTEM.py": {
      "size": 38906,
      "lines": 946,
      "type": "py",
      "functions": [
        "__init__",
        "_initialize_database",
        "_initialize_exchanges",
        "get_free_ai_consensus",
        "get_premium_ai_consensus",
        "_query_openrouter_model",
        "capture_all_transactions",
        "_capture_exchange_transactions",
        "_process_transaction",
        "_store_transaction",
        "_queue_for_ai_validation",
        "_continuous_ai_validation",
        "_update_transaction_validation",
        "generate_compliance_report",
        "_extract_recommendations",
        "_store_compliance_report",
        "get_system_status",
        "main"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import ccxt",
        "import sqlite3",
        "import hashlib",
        "import threading",
        "from datetime import datetime, timedelta",
        "from typing import Dict, List, Any, Optional",
        "from dataclasses import dataclass, asdict",
        "import requests",
        "import pandas as pd",
        "from concurrent.futures import ThreadPoolExecutor, as_completed",
        "import logging"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/current_systems/main_dashboard_simple.py": {
      "size": 0,
      "lines": 1,
      "type": "py",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/current_systems/native_production_system.py": {
      "size": 10022,
      "lines": 268,
      "type": "py",
      "functions": [
        "__init__",
        "start_all_services",
        "start_okx_service",
        "okx_health",
        "okx_status",
        "okx_balance",
        "start_ai_service",
        "ai_health",
        "ai_status",
        "ai_consensus",
        "dashboard",
        "system_status",
        "health"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import time",
        "import threading",
        "import subprocess",
        "from datetime import datetime",
        "from flask import Flask, jsonify, request, render_template_string",
        "import requests",
        "import logging",
        "from flask import Flask",
        "from flask import Flask"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/current_systems/ngrok_forensic_integration.py": {
      "size": 29810,
      "lines": 733,
      "type": "py",
      "functions": [
        "initialize_commissioner",
        "forensic_dashboard",
        "api_system_health",
        "api_ai_status",
        "api_exchange_status",
        "api_vault_status",
        "api_compliance_events",
        "api_live_logs",
        "api_request_consensus",
        "api_generate_report",
        "api_emergency_stop",
        "forensic_status",
        "start_ngrok_integration"
      ],
      "imports": [
        "import os",
        "import sys",
        "import json",
        "import sqlite3",
        "from datetime import datetime, timedelta",
        "from flask import Flask, jsonify, render_template_string, request",
        "from AI_FORENSIC_COMPLIANCE_COMMISSIONER import AIForensicComplianceCommissioner",
        "import threading",
        "import logging"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/current_systems/system_status_check.py": {
      "size": 2366,
      "lines": 73,
      "type": "py",
      "functions": [
        "check_service",
        "main"
      ],
      "imports": [
        "import requests",
        "import json",
        "from datetime import datetime"
      ]
    },
    "/home/ubuntu/ultimate_lyra_v5/current_systems/ultimate_flask_dashboard.py": {
      "size": 229,
      "lines": 7,
      "type": "py",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/vault/encrypted_secrets.json": {
      "size": 1962,
      "lines": 69,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/containerization/docker-compose.yml": {
      "size": 59931,
      "lines": 2468,
      "type": "yml",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/containerization/kubernetes-manifests.yaml": {
      "size": 103541,
      "lines": 4962,
      "type": "yaml",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/containerization/ci-cd-pipeline.yml": {
      "size": 4584,
      "lines": 169,
      "type": "yml",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/containerization/ecosystem-summary.json": {
      "size": 15122,
      "lines": 653,
      "type": "json",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/containerization/helm-chart/Chart.yaml": {
      "size": 376,
      "lines": 18,
      "type": "yaml",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/containerization/helm-chart/values.yaml": {
      "size": 11146,
      "lines": 564,
      "type": "yaml",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/containerization/helm-chart/templates/deployment.yaml": {
      "size": 1157,
      "lines": 41,
      "type": "yaml",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/containerization/monitoring/prometheus.yml": {
      "size": 3343,
      "lines": 88,
      "type": "yml",
      "functions": [],
      "imports": []
    },
    "/home/ubuntu/ultimate_lyra_v5/containerization/monitoring/grafana-dashboard.json": {
      "size": 689,
      "lines": 40,
      "type": "json",
      "functions": [],
      "imports": []
    }
  },
  "configurations": {
    "/home/ubuntu/ultimate_lyra_v5/.env.production": {
      "size": 2292,
      "type": "configuration",
      "encrypted": false
    },
    "/home/ubuntu/ultimate_lyra_v5/vault/encrypted_secrets.json": {
      "size": 1962,
      "type": "configuration",
      "encrypted": true
    }
  },
  "ngrok_endpoints": {},
  "ai_capabilities": {
    "Grok Beta": {
      "model_id": "xai/grok-beta",
      "specialty": "Trading & Financial Analysis",
      "status": "AVAILABLE",
      "api_endpoint": "https://openrouter.ai/api/v1/chat/completions"
    },
    "Claude 3.5 Sonnet": {
      "model_id": "anthropic/claude-3.5-sonnet",
      "specialty": "Code Analysis & Security",
      "status": "AVAILABLE",
      "api_endpoint": "https://openrouter.ai/api/v1/chat/completions"
    },
    "GPT-4o": {
      "model_id": "openai/gpt-4o",
      "specialty": "System Architecture & Integration",
      "status": "AVAILABLE",
      "api_endpoint": "https://openrouter.ai/api/v1/chat/completions"
    },
    "DeepSeek Coder V2.5": {
      "model_id": "deepseek/deepseek-coder",
      "specialty": "Code Generation & Debugging",
      "status": "AVAILABLE",
      "api_endpoint": "https://openrouter.ai/api/v1/chat/completions"
    },
    "Qwen 2.5 72B": {
      "model_id": "qwen/qwen-2.5-72b-instruct",
      "specialty": "Data Analysis & Optimization",
      "status": "AVAILABLE",
      "api_endpoint": "https://openrouter.ai/api/v1/chat/completions"
    },
    "Llama 3.1 405B": {
      "model_id": "meta-llama/llama-3.1-405b-instruct",
      "specialty": "Strategic Planning",
      "status": "AVAILABLE",
      "api_endpoint": "https://openrouter.ai/api/v1/chat/completions"
    },
    "Mistral Large": {
      "model_id": "mistralai/mistral-large",
      "specialty": "Risk Assessment",
      "status": "AVAILABLE",
      "api_endpoint": "https://openrouter.ai/api/v1/chat/completions"
    },
    "Gemini Pro 1.5": {
      "model_id": "google/gemini-pro-1.5",
      "specialty": "Multi-modal Analysis",
      "status": "AVAILABLE",
      "api_endpoint": "https://openrouter.ai/api/v1/chat/completions"
    }
  },
  "financial_data": {
    "live_capital": 13947.76,
    "currency": "USD",
    "exchanges": [
      "OKX",
      "Binance",
      "Coinbase",
      "Kraken",
      "Gate.io",
      "BTC Markets",
      "Swyftx"
    ],
    "trading_mode": "AGGRESSIVE",
    "risk_management": {
      "never_sell_at_loss": true,
      "auto_compound": true,
      "max_positions": 25
    }
  },
  "security_features": {
    "encryption": "AES-256",
    "vault_system": true,
    "iso_compliance": true,
    "australian_ato": true,
    "audit_logging": true,
    "vault_location": "/home/ubuntu/ultimate_lyra_v5/vault/",
    "encrypted_secrets": true
  }
}