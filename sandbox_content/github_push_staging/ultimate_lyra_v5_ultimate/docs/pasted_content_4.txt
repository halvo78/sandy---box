Yep — there are solid **open-source** options you can slot into Lyra right now (no sim, local-first, auditable). Here’s the short list and how to use each.

## Top open-source crypto tax tools

* **Rotki** (desktop + API, local-first)
  Privacy-preserving portfolio & tax engine. It’s open-source, runs locally, and can generate a **tax report**; designed to keep your data on your machine.
  (Project/docs confirm “open-source, local-first… tax report” functionality.)

* **BittyTax** (CLI; great for UK/HMRC)
  Python CLI that produces a **UK crypto tax report (PDF)**, passes HMRC example test cases, and is primarily UK-focused (but workable elsewhere). ([GitHub][1])

* **RP2** (CLI; strong for US Form 8949/Schedule D)
  Computes capital gains and produces **US tax forms** (Form 8949 & Schedule D) from your transaction history; open-source with examples and docs. ([GitHub][2])

* **staketaxcsv** (CLI; DeFi chain coverage, CSV to Koinly/CoinTracking, etc.)
  MIT-licensed Python repo that generates **CSV exports** for many chains and formats (e.g., Koinly/CoinTracking), handy for exotic DeFi where other tools struggle. ([GitHub][3])

---

## How we plug these into your Lyra stack (clean, contained, one-at-a-time)

1. **Create a read-only “Tax” export pipeline (per exchange)**

   * Use CCXT with read-only keys to pull: trades/fills, funding, conversions, deposits/withdrawals, fees.
   * Write unified CSVs to `~/ultimate_lyra_systems/exports/<exchange>/<year>/raw/`.
   * Sanity checks: record counts vs exchange UI; fee currency totals; base/quote sums = settlement wallet movements.

2. **Normalization step**

   * Convert raw CCXT into standard schema (timestamp, type, base, quote, qty, price, fee, fee_ccy, txid, notes).
   * Store to `…/normalized/`. This is the single source for all tax tools.

3. **Tool containers (segmented)**

   * **rotki** container (or desktop) with a mounted `~/ultimate_lyra_systems/exports/` volume. Use Rotki’s importers and generate **local** tax reports.
   * **bittytax** container (UK runs only): mount normalized CSVs, run `bittytax` to produce a **PDF**. ([GitHub][1])
   * **rp2** container or venv (US runs): run `rp2` on normalized CSV to emit **Form 8949/Schedule D**. ([GitHub][2])
   * **staketaxcsv** container (when you’ve got Cosmos/Solana/DeFi flows): generate extra CSVs and merge into the normalized ledger. ([GitHub][3])

4. **Jurisdiction switch (one at a time)**

   * Dashboard toggle: `TAX_MODE={UK|US|Generic}` → calls the matching container and recipe.
   * Only one mode runs at once (mirrors your “bring on one type at a time” rule).

5. **Reconciliation & reality checks (no sim)**

   * Cross-check exchange exports against **on-chain** deposits/withdrawals (txids) for address-based assets.
   * Fee audit: sum reported fees and reconcile to exchange fee history endpoints (and VIP tier).
   * P&L round-trip: realized + unrealized + net deposits/withdrawals ≈ end balance deltas.

6. **Evidence pack output**

   * For every run, produce an `evidence/` folder with: inputs (raw/normalized), tool configs, run logs, generated reports (PDF/CSV), and a JSON summary (counts, totals, hash of inputs).

---

## Quick start commands (pattern)

* **Rotki** (local-first app; recommended default)
  Use Rotki to import CSVs (and/or connect read-only exchange APIs), then generate a tax report locally.

* **BittyTax (UK)**

  ```bash
  docker run --rm -v ~/ultimate_lyra_systems/exports:/data bittytax/bittytax \
    --input /data/normalized/2025_all.csv --output /data/reports/bittytax_2025.pdf
  ```

  (Produces a UK HMRC-style PDF report.) ([GitHub][1])

* **RP2 (US)**

  ```bash
  docker run --rm -v ~/ultimate_lyra_systems/exports:/data rp2/rp2 \
    rp2 --config /data/configs/rp2_config.yaml --in /data/normalized/2025_all.csv \
    --out /data/reports/rp2_2025/
  ```

  (Generates Form 8949/Schedule D files.) ([GitHub][2])

* **staketaxcsv (DeFi CSVs)**

  ```bash
  docker run --rm -v ~/ultimate_lyra_systems/exports:/data hodgerpodger/staketaxcsv \
    python3 staketaxcsv/report_osmo.py <wallet> --format all --out /data/defi_csv/
  ```

  (CSV outputs for many chains & formats.) ([GitHub][3])

---

## Where each shines

* **If you want one tool that’s local, GUI, broad importers, and privacy-first → Rotki.**
* **If you’re filing in the UK (HMRC rules, PDF) → BittyTax.** ([GitHub][1])
* **If you’re filing in the US with clean 8949/Schedule D output → RP2.** ([GitHub][2])
* **If your pain is DeFi chain coverage & CSV conversions → staketaxcsv.** ([GitHub][3])

---

## Safety & commissioning notes (fits your “real-only” rules)

* Use **read-only** API keys for tax export jobs.
* Lock the tax containers to **no network egress** except when fetching public chain data; mount data as read-only for report runs.
* Store keys in your vault; never embed in code.
* Keep a **VIP/fee snapshot** from each exchange for the tax year and archive it with the evidence pack (fee rates affect cost basis/realized P&L on some venues).
* Revoke/rotate any secrets that were ever pasted into chat or files.
* Create a **one-click “Tax Run”** in your launcher that: exports → normalizes → runs the selected tool → writes the evidence pack.

If you want, I can draft the `docker-compose.tax.yml` and a tiny CCXT exporter that writes the normalized CSV Lyra expects — then you can run UK or US pipelines one at a time with your commissioning flow.

[1]: https://github.com/BittyTax/BittyTax "GitHub - BittyTax/BittyTax: Crypto-currency tax calculator with support for all popular wallets, exchanges, explorers and migration from other crypto tax platforms"
[2]: https://github.com/eprbell/rp2 "GitHub - eprbell/rp2: Privacy-focused, free, open-source cryptocurrency tax calculator for multiple countries: it handles multiple coins/exchanges and computes long/short-term capital gains, cost bases, in/out lot relationships/fractioning, and account balances. It supports FIFO, LIFO, HIFO and it outputs in form 8949 format. It has a programmable plugin architecture"
[3]: https://github.com/hodgerpodger/staketaxcsv "GitHub - hodgerpodger/staketaxcsv: python repo to create blockchain CSVs"
