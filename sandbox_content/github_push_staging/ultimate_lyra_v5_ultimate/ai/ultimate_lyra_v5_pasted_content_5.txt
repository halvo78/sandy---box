How we plug these into your Lyra stack (clean, contained, one-at-a-time)

Create a read-only “Tax” export pipeline (per exchange)

Use CCXT with read-only keys to pull: trades/fills, funding, conversions, deposits/withdrawals, fees.

Write unified CSVs to ~/ultimate_lyra_systems/exports/<exchange>/<year>/raw/.

Sanity checks: record counts vs exchange UI; fee currency totals; base/quote sums = settlement wallet movements.

Normalization step

Convert raw CCXT into standard schema (timestamp, type, base, quote, qty, price, fee, fee_ccy, txid, notes).

Store to …/normalized/. This is the single source for all tax tools.

Tool containers (segmented)

rotki container (or desktop) with a mounted ~/ultimate_lyra_systems/exports/ volume. Use Rotki’s importers and generate local tax reports.

bittytax container (UK runs only): mount normalized CSVs, run bittytax to produce a PDF. 
GitHub

rp2 container or venv (US runs): run rp2 on normalized CSV to emit Form 8949/Schedule D. 
GitHub

staketaxcsv container (when you’ve got Cosmos/Solana/DeFi flows): generate extra CSVs and merge into the normalized ledger. 
GitHub

Jurisdiction switch (one at a time)

Dashboard toggle: TAX_MODE={UK|US|Generic} → calls the matching container and recipe.

Only one mode runs at once (mirrors your “bring on one type at a time” rule).

Reconciliation & reality checks (no sim)

Cross-check exchange exports against on-chain deposits/withdrawals (txids) for address-based assets.

Fee audit: sum reported fees and reconcile to exchange fee history endpoints (and VIP tier).

P&L round-trip: realized + unrealized + net deposits/withdrawals ≈ end balance deltas.

Evidence pack output

For every run, produce an evidence/ folder with: inputs (raw/normalized), tool configs, run logs, generated reports (PDF/CSV), and a JSON summary (counts, totals, hash of inputs).

Quick start commands (pattern)

Rotki (local-first app; recommended default)
Use Rotki to import CSVs (and/or connect read-only exchange APIs), then generate a tax report locally.

BittyTax (UK)

docker run --rm -v ~/ultimate_lyra_systems/exports:/data bittytax/bittytax \
  --input /data/normalized/2025_all.csv --output /data/reports/bittytax_2025.pdf


(Produces a UK HMRC-style PDF report.) 
GitHub

RP2 (US)

docker run --rm -v ~/ultimate_lyra_systems/exports:/data rp2/rp2 \
  rp2 --config /data/configs/rp2_config.yaml --in /data/normalized/2025_all.csv \
  --out /data/reports/rp2_2025/


(Generates Form 8949/Schedule D files.) 
GitHub

staketaxcsv (DeFi CSVs)

docker run --rm -v ~/ultimate_lyra_systems/exports:/data hodgerpodger/staketaxcsv \
  python3 staketaxcsv/report_osmo.py <wallet> --format all --out /data/defi_csv/


(CSV outputs for many chains & formats.) 
GitHub

Where each shines

If you want one tool that’s local, GUI, broad importers, and privacy-first → Rotki.

If you’re filing in the UK (HMRC rules, PDF) → BittyTax. 
GitHub

If you’re filing in the US with clean 8949/Schedule D output → RP2. 
GitHub

If your pain is DeFi chain coverage & CSV conversions → staketaxcsv. 
GitHub

Safety & commissioning notes (fits your “real-only” rules)

Use read-only API keys for tax export jobs.

Lock the tax containers to no network egress except when fetching public chain data; mount data as read-only for report runs.

Store keys in your vault; never embed in code.

Keep a VIP/fee snapshot from each exchange for the tax year and archive it with the evidence pack (fee rates affect cost basis/realized P&L on some venues).

Revoke/rotate any secrets that were ever pasted into chat or files.

Create a one-click “Tax Run” in your launcher that: exports → normalizes → runs the selected tool → writes the evidence pack.

If you want, I can draft the docker-compose.tax.yml and a tiny CCXT exporter that writes the normalized CSV Lyra expects — then you can run UK or US pipelines one at a time with your commissioning flow.
